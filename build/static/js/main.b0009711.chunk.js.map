{"version":3,"sources":["Layout/Header.js","utils/api/index.js","Layout/Button.js","Layout/CardForm.js","Layout/AddCard.js","Layout/EditDeck.js","Layout/Breadcrumb.js","Layout/EditCard.js","Layout/CardList.js","Layout/ViewDeck.js","Layout/Card.js","Layout/NotEnoughCards.js","Layout/Study.js","Layout/NotFound.js","Layout/Deck.js","Layout/DeckThumbnails.js","Layout/Home.js","Layout/CreateDeck.js","Layout/index.js","App.js","index.js"],"names":["Header","className","API_BASE_URL","process","headers","Headers","stripCards","deck","cards","fetchJson","url","options","a","fetch","response","status","Error","statusText","json","name","listDecks","signal","createDeck","method","body","JSON","stringify","readDeck","deckId","updateDeck","updatedDeck","id","deleteDeck","createCard","card","Number","readCard","cardId","updateCard","updatedCard","deleteCard","append","Button","children","onClick","type","DeleteButton","CardForm","initialCardData","setLoading","useParams","useRouteMatch","useState","cardData","setCardData","history","useHistory","useEffect","abortController","AbortController","console","log","loadCardData","abort","handleChange","target","value","event","preventDefault","push","onSubmit","htmlFor","rows","onChange","front","back","AddCard","currentDeck","loading","initialAddCardData","renderView","EditDeck","description","editDeckData","setEditDeckData","initialEditDeckData","to","Breadcrumb","crumbs","breadcrumbs","setBreadcrumbs","routes","path","crumbArray","map","crumb","key","found","find","route","includes","replacement","replace","indexOf","length","loadBreadcrumbs","EditCard","initialEditCardData","currentCard","loadEditCardData","CardList","window","confirm","deleteHandler","ViewDeck","Card","currentIndex","setCurrentIndex","setFront","NotEnoughCards","Study","NotFound","Deck","undefined","setCurrentDeck","deckToSetCurrent","loadCurrentDeck","exact","DeckThumbnails","decks","setDecks","deckContent","loadDecks","Home","CreateDeck","formData","setFormData","placeholder","Layout","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b0009711.chunk.js","sourcesContent":["import React from \"react\";\n\n/** Main header across top of all pages \n * \n */\n\nfunction Header() {\n  return (\n    <header className=\"jumbotron bg-primary\">\n      <div className=\"container text-white\">\n        <h1 className=\"display-4\">Flashcard-o-matic</h1>\n        <p className=\"lead\">Discover The Flashcard Difference.</p>\n      </div>\n    </header>\n  );\n}\nexport default Header;\n","/**\n * Defines the base URL for the API.\n * The default values is overridden by the `API_BASE_URL` environment variable.\n */\nconst API_BASE_URL = process.env.API_BASE_URL || \"http://localhost:5000\";\n\n/**\n * Defines the default headers for these functions to work with `json-server`\n */\nconst headers = new Headers();\nheaders.append(\"Content-Type\", \"application/json\");\n\n/**\n * Removes the `cards` property from the deck so it is not accidentally saved with the deck.\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param deck\n *  the deck instance\n * @returns {*}\n *  a copy of the deck instance with the `cards` property removed.\n */\nfunction stripCards(deck) {\n  const { cards, ...deckWithoutCards } = deck;\n  return deckWithoutCards;\n}\n\n/**\n * Fetch `json` from the specified URL and handle error status codes and ignore `AbortError`s\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param url\n *  the url for the requst.\n * @param options\n *  any options for fetch\n * @returns {Promise<Error|any>}\n *  a promise that resolves to the `json` data or an error.\n *  If the response is not in the 200 - 399 range the promise is rejected.\n */\nasync function fetchJson(url, options) {\n  try {\n    const response = await fetch(url, options);\n    if (response.status < 200 || response.status > 399) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    if (error.name !== \"AbortError\") {\n      throw error;\n    }\n  }\n}\n\n/**\n * Retrieves all existing decks.\n * @returns {Promise<[deck]>}\n *  a promise that resolves to a possibly empty array of decks saved in the database.\n */\nexport async function listDecks(signal) {\n  const url = `${API_BASE_URL}/decks?_embed=cards`;\n  return await fetchJson(url, { signal });\n}\n\n/**\n * Saves deck to the database (public/data/db.json).\n * There is no validation done on the deck object, any object will be saved.\n * @param deck\n *  the deck to save, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<deck>}\n *  a promise that resolves the saved deck, which will now have an `id` property.\n */\nexport async function createDeck(deck, signal) {\n  const url = `${API_BASE_URL}/decks`;\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(stripCards(deck)),\n    signal,\n  };\n  return await fetchJson(url, options);\n}\n\n/**\n * Retrieves the deck with the specified `deckId`\n * @param deckId\n *  the `id` property matching the desired deck.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<any>}\n *  a promise that resolves to the saved deck.\n */\nexport async function readDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}?_embed=cards`;\n  return await fetchJson(url, { signal });\n}\n\n/**\n * Updates an existing deck\n * @param updatedDeck\n *  the deck to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated deck.\n */\nexport async function updateDeck(updatedDeck, signal) {\n  const url = `${API_BASE_URL}/decks/${updatedDeck.id}?_embed=cards`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(stripCards(updatedDeck)),\n    signal,\n  };\n  return await fetchJson(url, options);\n}\n\n/**\n * Deletes the deck with the specified `deckId`.\n * @param deckId\n *  the id of the deck to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n\n/**\n * Retrieves all cards associated with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to a possible empty array of cards.\n */\nexport async function listCards(deckId, signal) {\n  const url = `${API_BASE_URL}/cards?deckId=${deckId}`;\n  return await fetchJson(url, { signal });\n}\n\n/**\n * Creates a new card associated with the specified `deckId`.\n * There is no validation that there is an existing deck with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param card\n *  the card to create, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the new card, which will have an `id` property.\n */\nexport async function createCard(deckId, card, signal) {\n  // There is a bug in json-server, if you post to /decks/:deckId/cards the associated deckId is a string\n  // and the card is not related to the deck because the data types of the ID's are different.\n  const url = `${API_BASE_URL}/cards`;\n  card.deckId = Number(deckId);\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(card),\n    signal,\n  };\n  return await fetchJson(url, options);\n}\n\n/**\n * Retrieves the card with the specified `cardId`\n * @param cardId\n *  the id of the target\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the saved card.\n */\nexport async function readCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  return await fetchJson(url, { signal });\n}\n\n/**\n * Updates an existing deck\n * @param updatedCard\n *  the card to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated card.\n */\nexport async function updateCard(updatedCard, signal) {\n  const url = `${API_BASE_URL}/cards/${updatedCard.id}`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(updatedCard),\n  };\n  return await fetchJson(url, options);\n}\n\n/**\n * Deletes the card with the specified `cardId`.\n * @param cardId\n *  the id of the card to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n","import React from \"react\";\r\n\r\nexport const Button = ({ children, onClick, type }) => (\r\n  <button\r\n    type={type ? { type } : \"button\"}\r\n    className=\"btn btn-primary mb-3 mr-2 mt-2\"\r\n    onClick={onClick}\r\n  >\r\n    {children}\r\n  </button>\r\n);\r\n\r\nexport const DeleteButton = ({ children, onClick, type, id = null }) => (\r\n  <button\r\n    type={type ? { type } : \"button\"}\r\n    className=\"btn btn-danger mb-3 mr-2 mt-2\"\r\n    id={id}\r\n    onClick={onClick}\r\n  >\r\n    {children}\r\n  </button>\r\n);\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useParams, useHistory, useRouteMatch } from \"react-router-dom\";\r\nimport { createCard, updateCard } from \"../utils/api\";\r\nimport { Button } from \"./Button\";\r\n\r\n/** shared form for AddCard and EditCard\r\n *\r\n *  @param {object} initialCardData\r\n *  the data to populate the form initially,\r\n *  blank for AddCard, the current card for EditCard\r\n */\r\n\r\nfunction CardForm({ initialCardData, setLoading }) {\r\n  const { deckId } = useParams();\r\n  const { url } = useRouteMatch();\r\n  const [cardData, setCardData] = useState({});\r\n  const history = useHistory();\r\n  useEffect(() => {\r\n    const abortController = new AbortController();\r\n    async function loadCardData() {\r\n      try {\r\n        setCardData(initialCardData);\r\n      } catch (error) {\r\n        if (error.name === \"AbortError\") {\r\n          console.log(\"loadCardData Aborted\");\r\n        } else {\r\n          throw error;\r\n        }\r\n      }\r\n    }\r\n    loadCardData();\r\n    return () => abortController.abort();\r\n  }, [url]);\r\n\r\n  const handleChange = ({ target }) => {\r\n    setCardData({\r\n      ...cardData,\r\n      [target.name]: target.value,\r\n    });\r\n  };\r\n\r\n  async function handleSubmit(event) {\r\n    event.preventDefault();\r\n    const abortController = new AbortController();\r\n    try {\r\n      if (cardData.id) {\r\n        await updateCard(cardData, abortController.signal);\r\n        history.push(`/decks/${deckId}`);\r\n      } else {\r\n        await createCard(deckId, cardData, abortController.signal);\r\n        setCardData(initialCardData);\r\n      }\r\n    } catch (error) {\r\n      if (error.name === \"AbortError\") {\r\n        console.log(\"CardForm Aborted\");\r\n      } else {\r\n        throw error;\r\n      }\r\n    }\r\n    setLoading(true);\r\n    return () => abortController.abort();\r\n  }\r\n\r\n  const renderView = (\r\n    <>\r\n      <form onSubmit={handleSubmit} className=\"form-group\">\r\n        <label htmlFor=\"front\">Front</label>\r\n        <textarea\r\n          className=\"form-control\"\r\n          id=\"front\"\r\n          name=\"front\"\r\n          rows=\"3\"\r\n          onChange={handleChange}\r\n          value={cardData.front}\r\n        />\r\n        <label htmlFor=\"backText\">Back</label>\r\n        <textarea\r\n          className=\"form-control\"\r\n          id=\"back\"\r\n          name=\"back\"\r\n          rows=\"3\"\r\n          onChange={handleChange}\r\n          value={cardData.back}\r\n        />\r\n        <Button\r\n          onClick={() => {\r\n            setLoading(true);\r\n            return history.push(`/decks/${deckId}`);\r\n          }}\r\n        >\r\n          Done\r\n        </Button>\r\n        <Button type=\"submit\">Save</Button>\r\n      </form>\r\n    </>\r\n  );\r\n  return renderView;\r\n}\r\nexport default CardForm;\r\n","import React from \"react\";\r\nimport {  useParams } from \"react-router-dom\";\r\nimport CardForm from \"./CardForm\";\r\n\r\n// /decks/:deckId/cards/new\r\n\r\n/** Create a new card and send it to the API\r\n *\r\n *  @param {object} currentDeck\r\n *  the deck which corresponds with :deckId in the url\r\n *  @param {function} setLoading\r\n *  set true to trigger a rerender\r\n *  @param {boolean} loading\r\n *  is the page currently in a loading cycle?\r\n *  prevent renders before data arrives\r\n */\r\n\r\nfunction AddCard({ currentDeck, setLoading, loading }) {\r\n  const { deckId } = useParams();\r\n  const { name } = currentDeck;\r\n  const initialAddCardData = {\r\n    deckId,\r\n    front: \"\",\r\n    back: \"\",\r\n  };\r\n  \r\n  const renderView = (\r\n    <div>\r\n      <h2>Add Card</h2>\r\n      <h3>Deck: {name}</h3>\r\n      <CardForm initialCardData={initialAddCardData} setLoading={setLoading} />\r\n    </div>\r\n  );\r\n  if (loading) {\r\n    return <p>Add Card Loading...</p>;\r\n  } else {\r\n    return <>{renderView}</>;\r\n  }\r\n}\r\n\r\nexport default AddCard;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useParams, Link, useHistory } from \"react-router-dom\";\r\nimport { Button } from \"./Button\";\r\nimport { updateDeck } from \"../utils/api/index\";\r\n\r\n// /decks/:deckId/edit\r\n\r\n/** updates a deck's name and description via an API\r\n *\r\n *  @param {object} currentDeck\r\n *  the current deck, corresponding to :deckId in the url, {name, description, id}\r\n *  @param {function} setLoading\r\n *  set true to update decks and trigger a re-render\r\n *  @param {boolean} loading\r\n *  is the page currently in a loading cycle?\r\n *  prevent renders before data arrives\r\n */\r\n\r\nfunction EditDeck({ currentDeck, setLoading, loading }) {\r\n  const { deckId } = useParams();\r\n  const [editDeckData, setEditDeckData] = useState({\r\n    name: \"test\",\r\n    description: \"alsoTest\",\r\n    id: deckId,\r\n  });\r\n  const { name, description } = currentDeck;\r\n  const history = useHistory();\r\n  const initialEditDeckData = {\r\n    name,\r\n    description,\r\n    id: deckId,\r\n  };\r\n\r\n  useEffect(() => {\r\n    setEditDeckData(initialEditDeckData);\r\n  }, []);\r\n\r\n  const handleChange = ({ target }) => {\r\n    setEditDeckData({\r\n      ...editDeckData,\r\n      [target.name]: target.value,\r\n    });\r\n  };\r\n\r\n  async function handleSubmit(event) {\r\n    event.preventDefault();\r\n    const abortController = new AbortController();\r\n    await updateDeck(editDeckData, abortController.signal);\r\n    history.push(`/decks/${deckId}`);\r\n    setLoading(true);\r\n    return () => abortController.abort();\r\n  }\r\n\r\n  const renderView = (\r\n    <div>\r\n      <h2>Edit Deck</h2>\r\n      <form onSubmit={handleSubmit} className=\"form-group\">\r\n        <label className=\"col-form-label\" htmlFor=\"name\">\r\n          Name\r\n        </label>\r\n        <input\r\n          type=\"text\"\r\n          className=\"form-control\"\r\n          onChange={handleChange}\r\n          value={editDeckData.name}\r\n          id=\"name\"\r\n          name=\"name\"\r\n        />\r\n        <label htmlFor=\"description\">Description</label>\r\n        <textarea\r\n          className=\"form-control\"\r\n          onChange={handleChange}\r\n          value={editDeckData.description}\r\n          id=\"description\"\r\n          name=\"description\"\r\n          rows=\"3\"\r\n        />\r\n        <Link to={`/decks/${deckId}`}>\r\n          <Button>Cancel</Button>\r\n        </Link>\r\n        <Button type=\"submit\">Submit</Button>\r\n      </form>\r\n    </div>\r\n  );\r\n  if (loading) {\r\n    return <p>Edit Deck Loading...</p>;\r\n  } else {\r\n    return <>{renderView}</>;\r\n  }\r\n}\r\n\r\nexport default EditDeck;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\n\r\n/** A component containing links back to pages in the path to current page\r\n *\r\n *  @param {array} crumbs\r\n *  an array of the pages to be in the breadcrumbed, [\"foo\", \"bar\", \"etc\"]\r\n *  @param {object} currentDeck\r\n *  stately object containing the current deck, {id, name, description}\r\n *  should only exist in routes including :deckId and :cardId\r\n *  @param {boolean} loading\r\n *  is the page currently in a loading cycle?\r\n *  prevent renders before data arrives\r\n */\r\n\r\nconst Breadcrumb = ({ crumbs, currentDeck, loading }) => {\r\n  const { deckId, cardId } = useParams();\r\n  const [breadcrumbs, setBreadcrumbs] = useState([]);\r\n  const routes = [\r\n    { path: \"/\", name: \"Home\" }, // Home\r\n    { path: \"/decks/:deckId\", name: \"Deck\" }, // Deck\r\n    { path: \"/decks/new\", name: \"Create Deck\" }, // CreateDeck\r\n    { path: \"/decks/:deckId/study\", name: \"Study\" }, // Study\r\n    { path: \"/decks/:deckId/edit\", name: \"Edit Deck\" }, // EditDeck\r\n    { path: \"/decks/:deckId/cards/new\", name: \"Add Card\" }, // AddCard\r\n    { path: \"/decks/:deckId/cards/:cardId/edit\", name: \"Edit Card\" }, // EditCard\r\n  ];\r\n\r\n  useEffect(() => {\r\n    const abortController = new AbortController();\r\n    async function loadBreadcrumbs() {\r\n      try {\r\n        const crumbArray = crumbs.map((crumb, key) => {\r\n          const found = routes.find((route) => {\r\n            return route.name === crumb;\r\n          });\r\n          // special cases to use names based on the specific deck or card\r\n          if (found.path.includes(\":deckId\")) {\r\n            const replacement = found.path.replace(\":deckId\", deckId);\r\n            found.path = replacement;\r\n          }\r\n          if (found.path.includes(\":cardId\")) {\r\n            const replacement = found.path.replace(\":cardId\", cardId);\r\n            found.path = replacement;\r\n          }\r\n          if (found.name === \"Deck\") {\r\n            found.name = currentDeck.name;\r\n          }\r\n          if (found.name === \"Edit Card\") {\r\n            found.name = `Edit Card ${cardId}`;\r\n          }\r\n          // just a name for the current page, a link for everything else\r\n          if (crumbs.indexOf(crumb) === crumbs.length - 1) {\r\n            return (\r\n              <li key={key} className=\"breadcrumb-item active\">\r\n                {found.name}\r\n              </li>\r\n            );\r\n          } else {\r\n            return (\r\n              <li key={key} className=\"breadcrumb-item\">\r\n                <Link to={found.path}>{found.name}</Link>\r\n              </li>\r\n            );\r\n          }\r\n        });\r\n        setBreadcrumbs(crumbArray);\r\n      } catch (error) {\r\n        if (error.name === \"AbortError\") {\r\n          console.log(\"loadBreadcrumbs Aborted\");\r\n        } else {\r\n          throw error;\r\n        }\r\n      }\r\n    }\r\n    loadBreadcrumbs();\r\n    return () => abortController.abort();\r\n  }, [deckId, cardId, crumbs]);\r\n  if (loading) {\r\n    return <p>Loading Breadcrumb...</p>;\r\n  } else {\r\n    return <ol className=\"breadcrumb\">{breadcrumbs}</ol>;\r\n  }\r\n};\r\n\r\nexport default Breadcrumb;\r\n","import React, { useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { readCard } from \"../utils/api\";\r\nimport CardForm from \"./CardForm\";\r\n\r\n/** A component to modify the content of a particular card via an API\r\n *\r\n *  @param {function} setLoading\r\n *  set true to update decks and trigger a rerender\r\n *  @param {boolean} loading\r\n *  is the page currently in a loading cycle?\r\n *  prevent renders before data arrives\r\n */\r\n\r\nfunction EditCard({ setLoading, loading }) {\r\n  const { cardId, deckId } = useParams();\r\n  const initialEditCardData = {};\r\n\r\n  useEffect(() => {\r\n    async function loadEditCardData() {\r\n      const abortController = new AbortController();\r\n      try {\r\n        const currentCard = await readCard(cardId, abortController.signal);\r\n        initialEditCardData.id = currentCard.id;\r\n        initialEditCardData.front = currentCard.front;\r\n        initialEditCardData.back = currentCard.back;\r\n        initialEditCardData.deckId = currentCard.deckId;\r\n      } catch (error) {\r\n        if (error.name === \"AbortError\") {\r\n          console.log(\"loadEditCardData Aborted\");\r\n        } else {\r\n          throw error;\r\n        }\r\n      }\r\n      return () => abortController.abort();\r\n    }\r\n    loadEditCardData();\r\n  }, [deckId, cardId]);\r\n\r\n  const renderView = (\r\n    <div>\r\n      <h2>Edit Card</h2>\r\n      <CardForm initialCardData={initialEditCardData} setLoading={setLoading} />\r\n    </div>\r\n  );\r\n  if (loading) {\r\n    return <p>Edit Card Loading...</p>;\r\n  } else {\r\n    return <>{renderView}</>;\r\n  }\r\n}\r\n\r\nexport default EditCard;\r\n","import React from \"react\";\r\nimport { Link, useRouteMatch } from \"react-router-dom\";\r\nimport { Button, DeleteButton } from \"./Button\";\r\nimport { deleteCard } from \"../utils/api/index\";\r\n\r\n/** Lists out all the cards for use in the ViewDeck Component.\r\n *  Each card has a button to edit or delete that card.\r\n *\r\n *  @param {array} cards\r\n *  an array of cards representing the current deck\r\n *  @param {function} setLoading\r\n *  a stately function to update decks and trigger a re-render\r\n *  @param {boolean} loading\r\n *  is the page currently in a loading cycle?\r\n *  prevent renders before data arrives\r\n */\r\n\r\nfunction CardList({ cards, setLoading, loading }) {\r\n  const { url } = useRouteMatch();\r\n\r\n  async function deleteHandler(id) {\r\n    if (\r\n      window.confirm(\"Delete this card?\\n\\nYou will not be able to recover it.\")\r\n    ) {\r\n      await deleteCard(id);\r\n      setLoading(true);\r\n    }\r\n  }\r\n  const renderView = cards.map((card) => (\r\n    <div key={card.id}>\r\n      <div className=\"card border-primary mb-3\" >\r\n        <div className=\"card-body\">\r\n          <h4 className=\"card-text text-danger\">Front</h4>\r\n          <p className=\"card-text\">{card.front}</p>\r\n          <br />\r\n          <h4 className=\"card-text text-danger\">Back</h4>\r\n          <p className=\"card-text\">{card.back}</p>\r\n          <Link to={`${url}/cards/${card.id}/edit`}>\r\n            <Button>Edit</Button>\r\n          </Link>\r\n          <DeleteButton onClick={() => deleteHandler(card.id)}>\r\n            Delete\r\n          </DeleteButton>\r\n        </div>\r\n      </div>\r\n      <br />\r\n      <br />\r\n    </div>\r\n  ));\r\n  if (loading) {\r\n    return <p>Loading Card List...</p>;\r\n  } else {\r\n    return <>{renderView}</>;\r\n  }\r\n}\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\nimport { Link, useHistory, useRouteMatch } from \"react-router-dom\";\r\nimport { deleteDeck } from \"../utils/api\";\r\nimport { Button, DeleteButton } from \"./Button\";\r\nimport CardList from \"./CardList\";\r\n\r\n// decks/:deckId\r\n\r\n/** Component to view a deck. Lays out all cards and gives navigation\r\n *  to EditDeck, Study, AddCard, EditCard. Can delete decks or cards from here.\r\n *\r\n *  @param {object} currentDeck\r\n *  the current deck corresponding to :deckId in the url\r\n *  @param {function} setLoading\r\n *  a function to update decks and trigger a re-render\r\n */\r\n\r\nfunction ViewDeck({ currentDeck, setLoading, loading }) {\r\n  const { name, description, cards, id } = currentDeck;\r\n  const { url } = useRouteMatch();\r\n  const history = useHistory();\r\n  async function deleteHandler() {\r\n    const abortController = new AbortController();\r\n    if (\r\n      window.confirm(\"Delete this deck?\\n\\nYou will not be able to recover it.\")\r\n    ) {\r\n      try{\r\n        await deleteDeck(id, abortController.signal);\r\n        setLoading(true);\r\n        history.push(\"/\");\r\n      } catch (error) {\r\n        if (error.name === \"AbortError\") {\r\n          console.log(\"ViewDeck Delete Aborted\")\r\n        } else {\r\n          console.log(error) ;\r\n        }\r\n      }\r\n      return () => abortController.abort();\r\n    }\r\n  }\r\n  const renderView = (\r\n    <div>\r\n      <h2>{name}</h2>\r\n      <h4>{description}</h4>\r\n      <Link to={`${url}/edit`}>\r\n        <Button>Edit</Button>\r\n      </Link>\r\n      <Link to={`${url}/study`}>\r\n        <Button>Study</Button>\r\n      </Link>\r\n      <Link to={`${url}/cards/new`}>\r\n        <Button>Add Cards</Button>\r\n      </Link>\r\n      <DeleteButton onClick={deleteHandler}>Delete</DeleteButton>\r\n      <CardList cards={cards} setLoading={setLoading} loading={loading} />\r\n    </div>\r\n  );\r\n  if (loading) {\r\n    return <p>Loading View Deck...</p>;\r\n  } else {\r\n    return <>{renderView}</>;\r\n  }\r\n}\r\n\r\nexport default ViewDeck;\r\n","import React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Button } from \"./Button\";\r\n\r\n/** For use inside Study component. Allows users to read both sides\r\n *  of flashcards and advance to next flashcard. Gives option to start\r\n *  over after reading last flashcard.\r\n *\r\n *  @param {object} currentDeck\r\n *  the current deck corresponding with :deckId in url, {name, description, id}\r\n *  @param {boolean} loading\r\n *  is the page currently in a loading cycle?\r\n *  prevent renders before data arrives\r\n */\r\n\r\nfunction Card({ currentDeck, loading }) {\r\n  const { cards } = currentDeck;\r\n  const [currentIndex, setCurrentIndex] = useState(0);\r\n  const [front, setFront] = useState(true);\r\n  const history = useHistory();\r\n\r\n  const nextButtonHandler = () => {\r\n    if (currentIndex < cards.length - 1) {\r\n      setCurrentIndex(currentIndex + 1);\r\n      setFront(true);\r\n    } else {\r\n      if (\r\n        window.confirm(\r\n          \"Restart cards?\\n\\nClick 'Cancel' to return to the home page\"\r\n        )\r\n      ) {\r\n        setCurrentIndex(0);\r\n        setFront(true);\r\n      } else {\r\n        history.push(\"/\");\r\n      }\r\n    }\r\n  };\r\n\r\n  const flipButtonHandler = () => {\r\n    setFront(!front);\r\n  };\r\n\r\n  const renderView = (\r\n    <div className=\"card border-primary mb-3\">\r\n      <div className=\"card-body\">\r\n        {/* TODO: title is card # of # */}\r\n        <h4 className=\"card-title\">\r\n          Card {currentIndex + 1} of {cards.length}\r\n        </h4>\r\n        {/* TODO: put card content here */}\r\n        <p className=\"card-text\">\r\n          {front ? cards[currentIndex].front : cards[currentIndex].back}\r\n        </p>\r\n        {/* TODO: implement flip button */}\r\n        <Button onClick={flipButtonHandler}>Flip</Button>\r\n        {/* TODO: routing to only show Next once card is flipped */}\r\n        {!front ? <Button onClick={nextButtonHandler}>Next</Button> : null}\r\n      </div>\r\n    </div>\r\n  );\r\n  if (loading) {\r\n    return <p>Loading Card...</p>;\r\n  } else {\r\n    return <>{renderView}</>;\r\n  }\r\n}\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport { Button } from \"./Button\";\r\n\r\n/** If a user attempts to start a study session with a deck containing less\r\n *  than three cards they will be directed here, where they can add cards.\r\n *\r\n *  @param {array} cards\r\n *  The cards in the current deck.\r\n */\r\n\r\nfunction NotEnoughCards({ cards }) {\r\n  const { deckId } = useParams();\r\n\r\n  return (\r\n    <div>\r\n      <h3>Not enough cards.</h3>\r\n      <p>\r\n        You need at least 3 cards to study. There are {cards.length} cards in\r\n        this deck.\r\n      </p>\r\n      <Link to={`/decks/${deckId}/cards/new`}>\r\n        <Button>Add Cards</Button>\r\n      </Link>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NotEnoughCards;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\nimport NotEnoughCards from \"./NotEnoughCards\";\r\n\r\n// /decks/:deckId/study\r\n\r\n/** A Component for an active study session. Card Component displays cards.\r\n *  If there are less than 3 cards displays NotEnoughCards\r\n *\r\n *  @param {object} currentDeck\r\n *  the current deck corresponding with :deckId in the url\r\n *  @param {boolean} loading\r\n *  is the page currently in a loading cycle?\r\n *  prevent renders before data arrives\r\n */\r\n\r\nfunction Study({ currentDeck, loading }) {\r\n  // TODO: deal with race condition here\r\n  //const { deckId } = useParams();\r\n  //const currentDeck = decks.find((deck) => deck.id === Number(deckId));\r\n  const { name, cards } = currentDeck;\r\n  const renderView = (\r\n    <div>\r\n      <h2>Study: {name}</h2>\r\n      <Card currentDeck={currentDeck} loading={loading} />\r\n    </div>\r\n  );\r\n  if (loading) {\r\n    return <p>Study Loading...</p>;\r\n  }\r\n  if (cards.length < 3) {\r\n    return (\r\n      <div>\r\n        <NotEnoughCards cards={cards} />\r\n      </div>\r\n    );\r\n  }\r\n  return <>{renderView}</>;\r\n}\r\n\r\nexport default Study;\r\n","import React from \"react\";\n\n/** a fallback component for bad URLs\n */\n\nfunction NotFound({ loading }) {\n  const renderView = (\n    <div className=\"NotFound\">\n      <h1>Not Found</h1>\n    </div>\n  );\n  if (loading) {\n    return <p>Loading...</p>;\n  } else {\n    return <>{renderView}</>;\n  }\n}\n\nexport default NotFound;\n","import React, { useEffect, useState } from \"react\";\r\nimport { Switch, Route, useParams } from \"react-router-dom\";\r\nimport AddCard from \"./AddCard\";\r\nimport EditDeck from \"./EditDeck\";\r\nimport Breadcrumb from \"./Breadcrumb\";\r\nimport EditCard from \"./EditCard\";\r\nimport ViewDeck from \"./ViewDeck\";\r\nimport Study from \"./Study\";\r\nimport NotFound from \"./NotFound\";\r\nimport { readDeck } from \"../utils/api\";\r\n\r\n/** A component for all routes containing :deckId.\r\n *\r\n *  @param {function} setLoading\r\n *  set true to trigger updating decks and a rerender\r\n *  @param {boolean} loading\r\n *  is the page currently in a loading cycle?\r\n *  prevent renders before data arrives\r\n */\r\n\r\nfunction Deck({ setLoading, loading }) {\r\n  const { deckId } = useParams();\r\n  const [currentDeck, setCurrentDeck] = useState(undefined);\r\n\r\n  useEffect(() => {\r\n    const abortController = new AbortController();\r\n    async function loadCurrentDeck() {\r\n      try {\r\n        const deckToSetCurrent = await readDeck(deckId, abortController.signal);\r\n        setCurrentDeck(deckToSetCurrent);\r\n      } catch (error) {\r\n        if (error.name === \"AbortError\") {\r\n          console.log(\"loadCurrentDeck Aborted\");\r\n        } else {\r\n          throw error;\r\n        }\r\n      }\r\n    }\r\n    loadCurrentDeck();\r\n    setLoading(false);\r\n    return () => abortController.abort();\r\n  }, [deckId, loading]);\r\n\r\n  if (currentDeck) {\r\n    return (\r\n      <div>\r\n        <Switch>\r\n          <Route exact path=\"/decks/:deckId\">\r\n            <Breadcrumb\r\n              crumbs={[\"Home\", \"Deck\"]}\r\n              currentDeck={currentDeck}\r\n              loading={loading}\r\n            />\r\n            <ViewDeck\r\n              currentDeck={currentDeck}\r\n              setLoading={setLoading}\r\n              loading={loading}\r\n            />\r\n          </Route>\r\n          <Route path=\"/decks/:deckId/edit\">\r\n            <Breadcrumb\r\n              crumbs={[\"Home\", \"Deck\", \"Edit Deck\"]}\r\n              currentDeck={currentDeck}\r\n              loading={loading}\r\n            />\r\n            <EditDeck\r\n              currentDeck={currentDeck}\r\n              setLoading={setLoading}\r\n              loading={loading}\r\n            />\r\n          </Route>\r\n          <Route path=\"/decks/:deckId/cards/new\">\r\n            <Breadcrumb\r\n              crumbs={[\"Home\", \"Deck\", \"Add Card\"]}\r\n              currentDeck={currentDeck}\r\n              loading={loading}\r\n            />\r\n            <AddCard\r\n              currentDeck={currentDeck}\r\n              setLoading={setLoading}\r\n              loading={loading}\r\n            />\r\n          </Route>\r\n          <Route path=\"/decks/:deckId/cards/:cardId/edit\">\r\n            <Breadcrumb\r\n              crumbs={[\"Home\", \"Deck\", \"Edit Card\"]}\r\n              currentDeck={currentDeck}\r\n              loading={loading}\r\n            />\r\n            <EditCard\r\n              currentDeck={currentDeck}\r\n              setLoading={setLoading}\r\n              loading={loading}\r\n            />\r\n          </Route>\r\n          <Route path=\"/decks/:deckId/study\">\r\n            <Breadcrumb\r\n              crumbs={[\"Home\", \"Deck\", \"Study\"]}\r\n              currentDeck={currentDeck}\r\n              loading={loading}\r\n            />\r\n            <Study currentDeck={currentDeck} loading={loading} />\r\n          </Route>\r\n        </Switch>\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div>\r\n        <NotFound loading={loading} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Deck;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { Button, DeleteButton } from \"./Button\";\r\nimport { deleteDeck, listDecks } from \"../utils/api/index\";\r\n\r\n/** displays each deck with buttons to Study, View, and Delete\r\n *  @param {array} decks\r\n *  the list of decks, {id, name, description}\r\n *  @param {function} setLoading\r\n *  set true to trigger updating decks and a rerender\r\n *  @param {boolean} loading\r\n *  is the page currently in a loading cycle?\r\n *  prevent renders before data arrives\r\n */\r\nfunction DeckThumbnails({ setLoading, loading }) {\r\n  const history = useHistory();\r\n  const [decks, setDecks] = useState([]);\r\n  useEffect(() => {\r\n    const abortController = new AbortController();\r\n    //setLoading(true);\r\n    async function loadDecks() {\r\n      try {\r\n        const deckContent = await listDecks(abortController.signal);\r\n        setDecks(deckContent);\r\n      } catch (error) {\r\n        if (error.name === \"AbortError\") {\r\n          console.log(\"loadDecks Aborted\");\r\n        } else {\r\n          throw error;\r\n        }\r\n      }\r\n    }\r\n    loadDecks();\r\n    setLoading(false);\r\n    return () => abortController.abort();\r\n  }, [loading, setLoading]);\r\n\r\n  async function deleteHandler({ target }) {\r\n    const id = target.id;\r\n    const abortController = new AbortController();\r\n    if (\r\n      window.confirm(\"Delete this deck?\\n\\nYou will not be able to recover it.\")\r\n    ) {\r\n      try{\r\n        await deleteDeck(id, abortController.signal);\r\n        setLoading(true);\r\n        setLoading(false);\r\n        history.push(\"/\");\r\n      } catch (error) {\r\n        if (error.name === \"AbortError\") {\r\n          console.log(\"ViewDeck Delete Aborted\")\r\n        } else {\r\n          console.log(error) ;\r\n        }\r\n      }\r\n      return () => abortController.abort();\r\n    }\r\n  }\r\n\r\n  const renderView = decks.map(({ id, name, description, cards }) => {\r\n    return (\r\n      <div key={id} className=\"card mb-3\">\r\n        <div className=\"card-body\">\r\n          {/* TODO: deck title here */}\r\n          <h4 className=\"card-title text-danger\">{name}</h4>\r\n          {/* TODO: number of cards here */}\r\n          <h6 className=\"card-subtitle mb-2 text-muted\">\r\n            {cards.length} cards\r\n          </h6>\r\n          <p className=\"card-text\">{description}</p>\r\n          <br />\r\n          {/* TODO: onClick to go to Study */}\r\n          <Link to={`/decks/${id}/study`}>\r\n            <Button>Study</Button>\r\n          </Link>\r\n          {/* TODO: onClick to go to DeckView */}\r\n          <Link to={`/decks/${id}`}>\r\n            <Button>View</Button>\r\n          </Link>\r\n          {/* TODO: modal w/ \"OK\" or \"Cancel\" */}\r\n          {/* TODO: onClick delete */}\r\n          <DeleteButton onClick={deleteHandler} id={id}>\r\n            Delete\r\n          </DeleteButton>\r\n        </div>\r\n      </div>\r\n    );\r\n  });\r\n  if (loading) {\r\n    return <p>Loading Deck Thumbnails...</p>;\r\n  } else {\r\n    return <div>{renderView}</div>;\r\n  }\r\n}\r\n\r\nexport default DeckThumbnails;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport DeckThumbnails from \"./DeckThumbnails\";\r\nimport { Button } from \"./Button\";\r\n\r\n// /\r\n\r\n/** The Home page of the app. Button to Create Deck. \r\n *  Shows decks via DeckThumbnails with Study/View/Delete buttons\r\n * \r\n *  @param {function} setLoading\r\n *  set true to update decks and trigger a re-render\r\n *  @param {boolean} loading\r\n *  is the page currently in a loading cycle?\r\n *  prevent renders before data arrives\r\n */\r\n\r\nfunction Home({ setLoading, loading }) {\r\n  const renderView = (\r\n    <div>\r\n      <Link to=\"/decks/new\">\r\n        <Button>Create Deck</Button>\r\n      </Link>\r\n      <DeckThumbnails setLoading={setLoading} loading={loading} />\r\n    </div>\r\n  );\r\n\r\n  if (loading) {\r\n    return <p>Loading Home...</p>;\r\n  } else {\r\n    return <div>{renderView}</div>;\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { createDeck } from \"../utils/api/index\";\r\nimport { Button } from \"./Button\";\r\n\r\n// /decks/new\r\n\r\n/** Create a new deck entry via API\r\n *\r\n *  @param {function} setLoading\r\n *  set true to trigger updating decks and a rerender\r\n *  @param {boolean} loading\r\n *  is the page currently in a loading cycle?\r\n *  prevent renders before data arrives\r\n */\r\n\r\nfunction CreateDeck({ setLoading, loading }) {\r\n  const initialFormData = {\r\n    name: \"\",\r\n    description: \"\",\r\n  };\r\n  const [formData, setFormData] = useState(initialFormData);\r\n  const history = useHistory();\r\n\r\n  const handleChange = ({ target }) => {\r\n    setFormData({\r\n      ...formData,\r\n      [target.name]: target.value,\r\n    });\r\n  };\r\n\r\n  async function handleSubmit(event) {\r\n    event.preventDefault();\r\n    const { id } = await createDeck(formData);\r\n    setLoading(true);\r\n    history.push(`/decks/${id}`);\r\n  }\r\n\r\n  const renderView = (\r\n    <div>\r\n      <h2>Create Deck</h2>\r\n      <form onSubmit={handleSubmit} className=\"form-group\">\r\n        <label className=\"col-form-label\" htmlFor=\"deckName\">\r\n          Name\r\n        </label>\r\n        <input\r\n          id=\"deckName\"\r\n          type=\"text\"\r\n          name=\"name\"\r\n          onChange={handleChange}\r\n          className=\"form-control\"\r\n          value={formData.name}\r\n          placeholder=\"Deck Name\"\r\n        />\r\n        <label htmlFor=\"deckDescription\">Description</label>\r\n        <textarea\r\n          id=\"deckDescription\"\r\n          name=\"description\"\r\n          onChange={handleChange}\r\n          className=\"form-control\"\r\n          value={formData.description}\r\n          rows=\"3\"\r\n          placeholder=\"Brief description of the deck\"\r\n        />\r\n        <Button onClick={() => history.push(\"/\")}>Cancel</Button>\r\n        <Button type=\"submit\">Submit</Button>\r\n      </form>\r\n    </div>\r\n  );\r\n  if (loading) {\r\n    return <p>Loading Create Deck...</p>;\r\n  } else {\r\n    return <>{renderView}</>;\r\n  }\r\n}\r\n\r\nexport default CreateDeck;\r\n","import React, { useState } from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Header from \"./Header\";\nimport Deck from \"./Deck\";\nimport NotFound from \"./NotFound\";\nimport Breadcrumb from \"./Breadcrumb\";\nimport Home from \"./Home\";\nimport CreateDeck from \"./CreateDeck\";\n\n/** Contains top level routes\n * \n */\n\nfunction Layout() {\n  const [loading, setLoading] = useState(false);\n\n  return (\n    <>\n      <Header />\n      <div className=\"container\">\n        <Switch>\n          <Route exact path=\"/\">\n            <Home setLoading={setLoading} loading={loading} />\n          </Route>\n          <Route path=\"/decks/new\">\n            <Breadcrumb crumbs={[\"Home\", \"Create Deck\"]} loading={loading} />\n            <CreateDeck setLoading={setLoading} loading={loading} />\n          </Route>\n          <Route path=\"/decks/:deckId\">\n            {/* nested routing continues in Deck component */}\n            <Deck setLoading={setLoading} loading={loading} />\n          </Route>\n          <Route>\n            <NotFound loading={loading} />\n          </Route>\n        </Switch>\n      </div>\n    </>\n  );\n}\n\nexport default Layout;\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Layout from \"./Layout\";\n\n/**\n * App is a wrapper for <Layout>, you should not need to change this file.\n */\n\nfunction App() {\n  return (\n    <div className=\"app-routes\">\n      <Switch>\n        <Route path=\"/\">\n          <Layout />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}