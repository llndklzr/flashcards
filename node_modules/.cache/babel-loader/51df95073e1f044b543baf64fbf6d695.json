{"ast":null,"code":"var _jsxFileName = \"D:\\\\Thinkful\\\\qualified-challenges\\\\Project_Flashcards_Qualified_1\\\\src\\\\Layout\\\\Home\\\\Deck\\\\Deck.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Switch, useRouteMatch, Route, useParams } from \"react-router-dom\";\nimport AddCard from \"../Deck/AddCard/AddCard\";\nimport EditDeck from \"../Deck/EditDeck/EditDeck\";\nimport Breadcrumb from \"../../Breadcrumb\";\nimport EditCard from \"../Deck/EditCard/EditCard\";\nimport ViewDeck from \"./ViewDeck/ViewDeck\";\nimport Study from \"../Deck/Study/Study\";\nimport NotFound from \"../../NotFound\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Deck({\n  decks,\n  setLoading,\n  setError,\n  ...restProps\n}) {\n  _s();\n\n  const {\n    url\n  } = useRouteMatch();\n  const {\n    deckId\n  } = useParams();\n  const [currentDeck, setCurrentDeck] = useState(undefined);\n  useEffect(() => {\n    const abortController = new AbortController();\n    setLoading(true);\n    const deckToSetCurrent = decks.find(deck => deck.id === Number(deckId));\n    Promise.resolve(deckToSetCurrent).then(result => setCurrentDeck(result)).catch(setError).then(setLoading(true));\n    return () => abortController.abort();\n  }, [deckId, decks]);\n\n  if (currentDeck) {\n    console.log(currentDeck.cards);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Switch, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/decks/:deckId\",\n          children: [/*#__PURE__*/_jsxDEV(Breadcrumb, {\n            crumbs: [\"Home\", \"Deck\"],\n            currentDeck: currentDeck\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ViewDeck, {\n            currentDeck: currentDeck,\n            setLoading: setLoading\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/decks/:deckId/edit\",\n          children: [/*#__PURE__*/_jsxDEV(Breadcrumb, {\n            crumbs: [\"Home\", \"Deck\", \"Add Card\"],\n            currentDeck: currentDeck\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(EditDeck, {\n            currentDeck: currentDeck,\n            setCurrentDeck: setCurrentDeck,\n            setLoading: setLoading\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/decks/:deckId/cards/new\",\n          children: [/*#__PURE__*/_jsxDEV(Breadcrumb, {\n            crumbs: [\"Home\", \"Deck\", \"Add Card\"],\n            currentDeck: currentDeck\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(AddCard, {\n            decks: decks,\n            setLoading: setLoading\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/decks/:deckId/cards/:cardId/edit\",\n          children: [/*#__PURE__*/_jsxDEV(Breadcrumb, {\n            crumbs: [\"Home\", \"Deck\", \"Edit Deck\"],\n            currentDeck: currentDeck\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(EditCard, {\n            currentDeck: currentDeck\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/decks/:deckId/study\",\n          children: [/*#__PURE__*/_jsxDEV(Breadcrumb, {\n            crumbs: [\"Home\", \"Deck\", \"Study\"],\n            currentDeck: currentDeck\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Study, {\n            currentDeck: currentDeck\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(NotFound, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n_s(Deck, \"4mVFCt1FciAfHjsFsRf96ukMOdw=\", false, function () {\n  return [useRouteMatch, useParams];\n});\n\n_c = Deck;\nexport default Deck;\n\nvar _c;\n\n$RefreshReg$(_c, \"Deck\");","map":{"version":3,"sources":["D:/Thinkful/qualified-challenges/Project_Flashcards_Qualified_1/src/Layout/Home/Deck/Deck.js"],"names":["React","useEffect","useState","Switch","useRouteMatch","Route","useParams","AddCard","EditDeck","Breadcrumb","EditCard","ViewDeck","Study","NotFound","Deck","decks","setLoading","setError","restProps","url","deckId","currentDeck","setCurrentDeck","undefined","abortController","AbortController","deckToSetCurrent","find","deck","id","Number","Promise","resolve","then","result","catch","abort","console","log","cards"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Switch, useRouteMatch, Route, useParams } from \"react-router-dom\";\r\nimport AddCard from \"../Deck/AddCard/AddCard\";\r\nimport EditDeck from \"../Deck/EditDeck/EditDeck\";\r\nimport Breadcrumb from \"../../Breadcrumb\";\r\nimport EditCard from \"../Deck/EditCard/EditCard\";\r\nimport ViewDeck from \"./ViewDeck/ViewDeck\";\r\nimport Study from \"../Deck/Study/Study\";\r\nimport NotFound from \"../../NotFound\";\r\n\r\nfunction Deck({ decks, setLoading, setError, ...restProps }) {\r\n  const { url } = useRouteMatch();\r\n  const { deckId } = useParams();\r\n  const [currentDeck, setCurrentDeck] = useState(undefined);\r\n\r\n  useEffect(() => {\r\n    const abortController = new AbortController();\r\n    setLoading(true);\r\n\r\n    const deckToSetCurrent = decks.find((deck) => deck.id === Number(deckId));\r\n\r\n    Promise.resolve(deckToSetCurrent)\r\n      .then((result) => setCurrentDeck(result))\r\n      .catch(setError)\r\n      .then(setLoading(true));\r\n\r\n    return () => abortController.abort();\r\n  }, [deckId, decks]);\r\n\r\n  if (currentDeck) {\r\n    console.log(currentDeck.cards)\r\n    return (\r\n      <div>\r\n        <Switch>\r\n          <Route exact path=\"/decks/:deckId\">\r\n            <Breadcrumb crumbs={[\"Home\", \"Deck\"]} currentDeck={currentDeck} />\r\n            <ViewDeck currentDeck={currentDeck} setLoading={setLoading} />\r\n          </Route>\r\n          <Route path=\"/decks/:deckId/edit\">\r\n            <Breadcrumb\r\n              crumbs={[\"Home\", \"Deck\", \"Add Card\"]}\r\n              currentDeck={currentDeck}\r\n            />\r\n            <EditDeck\r\n              currentDeck={currentDeck}\r\n              setCurrentDeck={setCurrentDeck}\r\n              setLoading={setLoading}\r\n            />\r\n          </Route>\r\n          <Route path=\"/decks/:deckId/cards/new\">\r\n            <Breadcrumb\r\n              crumbs={[\"Home\", \"Deck\", \"Add Card\"]}\r\n              currentDeck={currentDeck}\r\n            />\r\n            <AddCard decks={decks} setLoading={setLoading} />\r\n          </Route>\r\n          <Route path=\"/decks/:deckId/cards/:cardId/edit\">\r\n            <Breadcrumb\r\n              crumbs={[\"Home\", \"Deck\", \"Edit Deck\"]}\r\n              currentDeck={currentDeck}\r\n            />\r\n            <EditCard currentDeck={currentDeck} />\r\n          </Route>\r\n          <Route path=\"/decks/:deckId/study\">\r\n            <Breadcrumb\r\n              crumbs={[\"Home\", \"Deck\", \"Study\"]}\r\n              currentDeck={currentDeck}\r\n            />\r\n            <Study currentDeck={currentDeck} />\r\n          </Route>\r\n        </Switch>\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div>\r\n        <NotFound />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Deck;\r\n"]},"metadata":{},"sourceType":"module"}