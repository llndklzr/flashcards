{"ast":null,"code":"var _jsxFileName = \"D:\\\\Thinkful\\\\qualified-challenges\\\\Project_Flashcards_Qualified_1\\\\src\\\\Layout\\\\Breadcrumb.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport routes from \"./routes\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Breadcrumb = ({\n  crumbs,\n  deckId = null,\n  cardId = null\n}) => {\n  _s();\n\n  // i.e. crumbs = [{name: \"Home\", path: \"/\"}, {name: \"Deck\", path: `/decks/${deckId}`},{name: \"Study\"} ]\n  const [breadcrumbs, setbreadcrumbs] = useState([]);\n  const crumbArray = crumbs.map(({\n    crumb\n  }, key) => {\n    const found = routes.find(route => {\n      console.log(`${route.name} === ${crumb}`);\n      return route.name === crumb;\n    });\n\n    if (found.path.includes(\":deckId\")) {\n      found.path.replace(\":deckId\", deckId);\n    }\n\n    if (crumbs.indexOf(crumb) === crumbs.length - 1) {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        children: crumb\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 14\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(Link, {\n        to: found.path,\n        children: found.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 14\n      }, this);\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: crumbArray\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 10\n  }, this);\n};\n\n_s(Breadcrumb, \"5lJyw+RzqxWF6LI4yf4hZcySvAc=\");\n\n_c = Breadcrumb;\nexport default Breadcrumb;\n\nvar _c;\n\n$RefreshReg$(_c, \"Breadcrumb\");","map":{"version":3,"sources":["D:/Thinkful/qualified-challenges/Project_Flashcards_Qualified_1/src/Layout/Breadcrumb.js"],"names":["React","useEffect","useState","Link","useParams","routes","Breadcrumb","crumbs","deckId","cardId","breadcrumbs","setbreadcrumbs","crumbArray","map","crumb","key","found","find","route","console","log","name","path","includes","replace","indexOf","length"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,IAAT,EAAeC,SAAf,QAAgC,kBAAhC;AACA,OAAOC,MAAP,MAAmB,UAAnB;;;AAEA,MAAMC,UAAU,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA,MAAM,GAAG,IAAnB;AAAyBC,EAAAA,MAAM,GAAG;AAAlC,CAAD,KAA8C;AAAA;;AAC/D;AAEA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCT,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAMU,UAAU,GAAGL,MAAM,CAACM,GAAP,CAAW,CAAC;AAAEC,IAAAA;AAAF,GAAD,EAAYC,GAAZ,KAAoB;AAChD,UAAMC,KAAK,GAAGX,MAAM,CAACY,IAAP,CAAaC,KAAD,IAAW;AACnCC,MAAAA,OAAO,CAACC,GAAR,CAAa,GAAEF,KAAK,CAACG,IAAK,QAAOP,KAAM,EAAvC;AAEA,aAAOI,KAAK,CAACG,IAAN,KAAeP,KAAtB;AAA4B,KAHhB,CAAd;;AAIA,QAAIE,KAAK,CAACM,IAAN,CAAWC,QAAX,CAAoB,SAApB,CAAJ,EAAoC;AAClCP,MAAAA,KAAK,CAACM,IAAN,CAAWE,OAAX,CAAmB,SAAnB,EAA8BhB,MAA9B;AACD;;AAED,QAAID,MAAM,CAACkB,OAAP,CAAeX,KAAf,MAA0BP,MAAM,CAACmB,MAAP,GAAgB,CAA9C,EAAiD;AAC/C,0BAAO;AAAA,kBAAOZ;AAAP;AAAA;AAAA;AAAA;AAAA,cAAP;AACD,KAFD,MAEO;AACL,0BAAO,QAAC,IAAD;AAAM,QAAA,EAAE,EAAEE,KAAK,CAACM,IAAhB;AAAA,kBAAuBN,KAAK,CAACK;AAA7B;AAAA;AAAA;AAAA;AAAA,cAAP;AACD;AACF,GAdkB,CAAnB;AAgBA,sBAAO;AAAA,cAAMT;AAAN;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CArBD;;GAAMN,U;;KAAAA,U;AAuBN,eAAeA,UAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport routes from \"./routes\";\r\n\r\nconst Breadcrumb = ({ crumbs, deckId = null, cardId = null }) => {\r\n  // i.e. crumbs = [{name: \"Home\", path: \"/\"}, {name: \"Deck\", path: `/decks/${deckId}`},{name: \"Study\"} ]\r\n\r\n  const [breadcrumbs, setbreadcrumbs] = useState([]);\r\n  const crumbArray = crumbs.map(({ crumb }, key) => {\r\n    const found = routes.find((route) => {\r\n      console.log(`${route.name} === ${crumb}`)\r\n      \r\n      return route.name === crumb});\r\n    if (found.path.includes(\":deckId\")) {\r\n      found.path.replace(\":deckId\", deckId);\r\n    }\r\n\r\n    if (crumbs.indexOf(crumb) === crumbs.length - 1) {\r\n      return <span>{crumb}</span>;\r\n    } else {\r\n      return <Link to={found.path}>{found.name}</Link>;\r\n    }\r\n  });\r\n\r\n  return <div>{crumbArray}</div>;\r\n};\r\n\r\nexport default Breadcrumb;\r\n"]},"metadata":{},"sourceType":"module"}