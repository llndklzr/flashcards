{"ast":null,"code":"var _jsxFileName = \"D:\\\\Thinkful\\\\qualified-challenges\\\\Project_Flashcards_Qualified_1\\\\src\\\\Layout\\\\Breadcrumb.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\n/** A component containing links back to pages in the path to current page\r\n *\r\n *  @param {array} crumbs\r\n *  an array of the pages to be in the breadcrumbed, [\"foo\", \"bar\", \"etc\"]\r\n *  @param {object} currentDeck\r\n *  stately object containing the current deck, {id, name, description}\r\n *  should only exist in routes including :deckId and :cardId\r\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Breadcrumb = ({\n  crumbs,\n  currentDeck,\n  loading\n}) => {\n  _s();\n\n  const {\n    deckId,\n    cardId\n  } = useParams();\n  const [breadcrumbs, setBreadcrumbs] = useState([]);\n  const routes = [{\n    path: \"/\",\n    name: \"Home\",\n    Component: \"Home\"\n  }, {\n    path: \"/decks/:deckId\",\n    name: \"Deck\",\n    Component: \"Deck\"\n  }, {\n    path: \"/decks/new\",\n    name: \"Create Deck\",\n    Component: \"CreateDeck\"\n  }, {\n    path: \"/decks/:deckId/study\",\n    name: \"Study\",\n    Component: \"Study\"\n  }, {\n    path: \"/decks/:deckId/edit\",\n    name: \"Edit Deck\",\n    Component: \"EditDeck\"\n  }, {\n    path: \"/decks/:deckId/cards/new\",\n    name: \"Add Card\",\n    Component: \"AddCard\"\n  }, {\n    path: \"/decks/:deckId/cards/:cardId/edit\",\n    name: \"Edit Card\",\n    Component: \"EditCard\"\n  }];\n  useEffect(() => {\n    const abortController = new AbortController();\n\n    async function loadBreadcrumbs() {\n      try {\n        const crumbArray = crumbs.map((crumb, key) => {\n          const found = routes.find(route => {\n            return route.name === crumb;\n          }); // special cases to use names based on the specific deck or card\n\n          if (found.path.includes(\":deckId\")) {\n            const replacement = found.path.replace(\":deckId\", deckId);\n            found.path = replacement;\n          }\n\n          if (found.path.includes(\":cardId\")) {\n            const replacement = found.path.replace(\":cardId\", cardId);\n            found.path = replacement;\n          }\n\n          if (found.name === \"Deck\") {\n            found.name = currentDeck.name;\n          }\n\n          if (found.name === \"Edit Card\") {\n            found.name = `Edit Card ${cardId}`;\n          } // just a name for the current page, a link for everything else\n\n\n          if (crumbs.indexOf(crumb) === crumbs.length - 1) {\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              className: \"breadcrumb-item active\",\n              children: found.name\n            }, key, false, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 15\n            }, this);\n          } else {\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              className: \"breadcrumb-item\",\n              children: /*#__PURE__*/_jsxDEV(Link, {\n                to: found.path,\n                children: found.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 67,\n                columnNumber: 17\n              }, this)\n            }, key, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 15\n            }, this);\n          }\n        });\n        setBreadcrumbs(crumbArray);\n      } catch (error) {\n        if (error.name === \"AbortError\") {\n          console.log(\"loadBreadcrumbs Aborted\");\n        } else {\n          throw error;\n        }\n      }\n    }\n\n    loadBreadcrumbs();\n    return () => abortController.abort();\n  }, [deckId, cardId, crumbs]);\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading Breadcrumb...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 12\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"ol\", {\n      className: \"breadcrumb\",\n      children: breadcrumbs\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 12\n    }, this);\n  }\n};\n\n_s(Breadcrumb, \"sb0kqTHgSLH/3TprFGfM2YBJCLM=\", false, function () {\n  return [useParams];\n});\n\n_c = Breadcrumb;\nexport default Breadcrumb;\n\nvar _c;\n\n$RefreshReg$(_c, \"Breadcrumb\");","map":{"version":3,"sources":["D:/Thinkful/qualified-challenges/Project_Flashcards_Qualified_1/src/Layout/Breadcrumb.js"],"names":["React","useEffect","useState","Link","useParams","Breadcrumb","crumbs","currentDeck","loading","deckId","cardId","breadcrumbs","setBreadcrumbs","routes","path","name","Component","abortController","AbortController","loadBreadcrumbs","crumbArray","map","crumb","key","found","find","route","includes","replacement","replace","indexOf","length","error","console","log","abort"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\n\r\n/** A component containing links back to pages in the path to current page\r\n *\r\n *  @param {array} crumbs\r\n *  an array of the pages to be in the breadcrumbed, [\"foo\", \"bar\", \"etc\"]\r\n *  @param {object} currentDeck\r\n *  stately object containing the current deck, {id, name, description}\r\n *  should only exist in routes including :deckId and :cardId\r\n */\r\n\r\nconst Breadcrumb = ({ crumbs, currentDeck, loading }) => {\r\n  const { deckId, cardId } = useParams();\r\n  const [breadcrumbs, setBreadcrumbs] = useState([]);\r\n  const routes = [\r\n    { path: \"/\", name: \"Home\", Component: \"Home\" },\r\n    { path: \"/decks/:deckId\", name: \"Deck\", Component: \"Deck\" },\r\n    { path: \"/decks/new\", name: \"Create Deck\", Component: \"CreateDeck\" },\r\n    { path: \"/decks/:deckId/study\", name: \"Study\", Component: \"Study\" },\r\n    { path: \"/decks/:deckId/edit\", name: \"Edit Deck\", Component: \"EditDeck\" },\r\n    {\r\n      path: \"/decks/:deckId/cards/new\",\r\n      name: \"Add Card\",\r\n      Component: \"AddCard\",\r\n    },\r\n    {\r\n      path: \"/decks/:deckId/cards/:cardId/edit\",\r\n      name: \"Edit Card\",\r\n      Component: \"EditCard\",\r\n    },\r\n  ];\r\n\r\n  useEffect(() => {\r\n    const abortController = new AbortController();\r\n    async function loadBreadcrumbs() {\r\n      try {\r\n        const crumbArray = crumbs.map((crumb, key) => {\r\n          const found = routes.find((route) => {\r\n            return route.name === crumb;\r\n          });\r\n          // special cases to use names based on the specific deck or card\r\n          if (found.path.includes(\":deckId\")) {\r\n            const replacement = found.path.replace(\":deckId\", deckId);\r\n            found.path = replacement;\r\n          }\r\n          if (found.path.includes(\":cardId\")) {\r\n            const replacement = found.path.replace(\":cardId\", cardId);\r\n            found.path = replacement;\r\n          }\r\n          if (found.name === \"Deck\") {\r\n            found.name = currentDeck.name;\r\n          }\r\n          if (found.name === \"Edit Card\") {\r\n            found.name = `Edit Card ${cardId}`;\r\n          }\r\n          // just a name for the current page, a link for everything else\r\n          if (crumbs.indexOf(crumb) === crumbs.length - 1) {\r\n            return (\r\n              <li key={key} className=\"breadcrumb-item active\">\r\n                {found.name}\r\n              </li>\r\n            );\r\n          } else {\r\n            return (\r\n              <li key={key} className=\"breadcrumb-item\">\r\n                <Link to={found.path}>{found.name}</Link>\r\n              </li>\r\n            );\r\n          }\r\n        });\r\n        setBreadcrumbs(crumbArray);\r\n      } catch (error) {\r\n        if (error.name === \"AbortError\") {\r\n          console.log(\"loadBreadcrumbs Aborted\");\r\n        } else {\r\n          throw error;\r\n        }\r\n      }\r\n    }\r\n    loadBreadcrumbs();\r\n    return () => abortController.abort();\r\n  }, [deckId, cardId, crumbs]);\r\n  if (loading) {\r\n    return <p>Loading Breadcrumb...</p>;\r\n  } else {\r\n    return <ol className=\"breadcrumb\">{breadcrumbs}</ol>;\r\n  }\r\n};\r\n\r\nexport default Breadcrumb;\r\n"]},"metadata":{},"sourceType":"module"}