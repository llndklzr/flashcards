{"ast":null,"code":"var _jsxFileName = \"D:\\\\Thinkful\\\\qualified-challenges\\\\Project_Flashcards_Qualified_1\\\\src\\\\Layout\\\\AddCard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { Button } from \"./Button\";\nimport { createCard } from \"../utils/api/index\"; // /decks/:deckId/cards/new\n\n/** Create a new card and send it to the API\r\n *\r\n *  @param {object} currentDeck\r\n *  the deck which corresponds with :deckId in the url\r\n *  @param {function} setLoading\r\n *  set true to trigger a rerender\r\n *  @param {boolean} loading\r\n *  is the page currently in a loading cycle?\r\n *  prevent renders before data arrives\r\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction AddCard({\n  currentDeck,\n  setLoading,\n  loading\n}) {\n  _s();\n\n  const {\n    deckId\n  } = useParams();\n  const {\n    name,\n    id\n  } = currentDeck;\n  const initialAddCardData = {\n    deckId,\n    front: \"\",\n    back: \"\"\n  }; // useEffect(() => {\n  //   const abortController = new AbortController();\n  //   async function loadAddCardData() {\n  //     try {\n  //       setAddCardData(initialAddCardData);\n  //     } catch (error) {\n  //       if (error.name === \"AbortError\") {\n  //         console.log(\"loadAddCardData Aborted\");\n  //       } else {\n  //         throw error;\n  //       }\n  //     }\n  //   }\n  //   loadAddCardData();\n  //   return () => abortController.abort;\n  // }, [deckId]);\n  // const handleChange = ({ target }) => {\n  //   setAddCardData({\n  //     ...addCardData,\n  //     [target.name]: target.value,\n  //   });\n  // };\n\n  const history = useHistory();\n\n  async function handleSubmit(event) {\n    event.preventDefault();\n    const abortController = new AbortController();\n\n    try {\n      await createCard(id, addCardData, abortController.signal);\n      setAddCardData(initialAddCardData);\n      setLoading(true);\n    } catch (error) {\n      if (error.name === \"AbortError\") {\n        console.log(\"AddCard handleSubmit Aborted\");\n      } else {\n        throw error;\n      }\n    }\n  }\n\n  const renderView = /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Add Card\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Deck: \", name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardForm, {\n      initialCardData: initialAddCardData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Add Card Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 12\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: renderView\n    }, void 0, false);\n  }\n}\n\n_s(AddCard, \"HsnE8mRsTyD2ysA5hF3RTleMX7Y=\", false, function () {\n  return [useParams, useHistory];\n});\n\n_c = AddCard;\nexport default AddCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddCard\");","map":{"version":3,"sources":["D:/Thinkful/qualified-challenges/Project_Flashcards_Qualified_1/src/Layout/AddCard.js"],"names":["React","useState","useEffect","useHistory","useParams","Button","createCard","AddCard","currentDeck","setLoading","loading","deckId","name","id","initialAddCardData","front","back","history","handleSubmit","event","preventDefault","abortController","AbortController","addCardData","signal","setAddCardData","error","console","log","renderView"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,UAAT,EAAqBC,SAArB,QAAsC,kBAAtC;AACA,SAASC,MAAT,QAAuB,UAAvB;AACA,SAASC,UAAT,QAA2B,oBAA3B,C,CAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAEA,SAASC,OAAT,CAAiB;AAAEC,EAAAA,WAAF;AAAeC,EAAAA,UAAf;AAA2BC,EAAAA;AAA3B,CAAjB,EAAuD;AAAA;;AACrD,QAAM;AAAEC,IAAAA;AAAF,MAAaP,SAAS,EAA5B;AACA,QAAM;AAAEQ,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAeL,WAArB;AACA,QAAMM,kBAAkB,GAAG;AACzBH,IAAAA,MADyB;AAEzBI,IAAAA,KAAK,EAAE,EAFkB;AAGzBC,IAAAA,IAAI,EAAE;AAHmB,GAA3B,CAHqD,CASrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAMC,OAAO,GAAGd,UAAU,EAA1B;;AAEA,iBAAee,YAAf,CAA4BC,KAA5B,EAAmC;AACjCA,IAAAA,KAAK,CAACC,cAAN;AACA,UAAMC,eAAe,GAAG,IAAIC,eAAJ,EAAxB;;AACA,QAAI;AACF,YAAMhB,UAAU,CAACO,EAAD,EAAKU,WAAL,EAAkBF,eAAe,CAACG,MAAlC,CAAhB;AACAC,MAAAA,cAAc,CAACX,kBAAD,CAAd;AACAL,MAAAA,UAAU,CAAC,IAAD,CAAV;AACD,KAJD,CAIE,OAAOiB,KAAP,EAAc;AACd,UAAIA,KAAK,CAACd,IAAN,KAAe,YAAnB,EAAiC;AAC/Be,QAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACD,OAFD,MAEO;AACL,cAAMF,KAAN;AACD;AACF;AACF;;AAED,QAAMG,UAAU,gBACd;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,2BAAWjB,IAAX;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,QAAD;AAAU,MAAA,eAAe,EAAEE;AAA3B;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;;AAOA,MAAIJ,OAAJ,EAAa;AACX,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,GAFD,MAEO;AACL,wBAAO;AAAA,gBAAGmB;AAAH,qBAAP;AACD;AACF;;GA/DQtB,O;UACYH,S,EAgCHD,U;;;KAjCTI,O;AAiET,eAAeA,OAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport { Button } from \"./Button\";\r\nimport { createCard } from \"../utils/api/index\";\r\n\r\n// /decks/:deckId/cards/new\r\n\r\n/** Create a new card and send it to the API\r\n *\r\n *  @param {object} currentDeck\r\n *  the deck which corresponds with :deckId in the url\r\n *  @param {function} setLoading\r\n *  set true to trigger a rerender\r\n *  @param {boolean} loading\r\n *  is the page currently in a loading cycle?\r\n *  prevent renders before data arrives\r\n */\r\n\r\nfunction AddCard({ currentDeck, setLoading, loading }) {\r\n  const { deckId } = useParams();\r\n  const { name, id } = currentDeck;\r\n  const initialAddCardData = {\r\n    deckId,\r\n    front: \"\",\r\n    back: \"\",\r\n  };\r\n\r\n  // useEffect(() => {\r\n  //   const abortController = new AbortController();\r\n  //   async function loadAddCardData() {\r\n  //     try {\r\n  //       setAddCardData(initialAddCardData);\r\n  //     } catch (error) {\r\n  //       if (error.name === \"AbortError\") {\r\n  //         console.log(\"loadAddCardData Aborted\");\r\n  //       } else {\r\n  //         throw error;\r\n  //       }\r\n  //     }\r\n  //   }\r\n  //   loadAddCardData();\r\n  //   return () => abortController.abort;\r\n  // }, [deckId]);\r\n\r\n  // const handleChange = ({ target }) => {\r\n  //   setAddCardData({\r\n  //     ...addCardData,\r\n  //     [target.name]: target.value,\r\n  //   });\r\n  // };\r\n\r\n  const history = useHistory();\r\n\r\n  async function handleSubmit(event) {\r\n    event.preventDefault();\r\n    const abortController = new AbortController();\r\n    try {\r\n      await createCard(id, addCardData, abortController.signal);\r\n      setAddCardData(initialAddCardData);\r\n      setLoading(true);\r\n    } catch (error) {\r\n      if (error.name === \"AbortError\") {\r\n        console.log(\"AddCard handleSubmit Aborted\");\r\n      } else {\r\n        throw error;\r\n      }\r\n    }\r\n  }\r\n\r\n  const renderView = (\r\n    <div>\r\n      <h2>Add Card</h2>\r\n      <h3>Deck: {name}</h3>\r\n      <CardForm initialCardData={initialAddCardData} />\r\n    </div>\r\n  );\r\n  if (loading) {\r\n    return <p>Add Card Loading...</p>;\r\n  } else {\r\n    return <>{renderView}</>;\r\n  }\r\n}\r\n\r\nexport default AddCard;\r\n"]},"metadata":{},"sourceType":"module"}