{"ast":null,"code":"var _jsxFileName = \"D:\\\\Thinkful\\\\qualified-challenges\\\\Project_Flashcards_Qualified_1\\\\src\\\\Layout\\\\Breadcrumb.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\n/** A component containing links back to pages in the path to current page\r\n * \r\n *  @param {array} crumbs\r\n *  an array of the pages to be in the breadcrumbed, [\"foo\", \"bar\", \"etc\"]\r\n *  @param {object} currentDeck\r\n *  stately object containing the current deck, {id, name, description}\r\n *  should only exist in routes including :deckId and :cardId\r\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Breadcrumb = ({\n  crumbs,\n  currentDeck\n}) => {\n  _s();\n\n  const {\n    deckId,\n    cardId\n  } = useParams();\n  const [breadcrumbs, setBreadcrumbs] = useState([]);\n  const routes = [{\n    path: \"/\",\n    name: \"Home\",\n    Component: \"Home\"\n  }, {\n    path: \"/decks/:deckId\",\n    name: \"Deck\",\n    Component: \"Deck\"\n  }, {\n    path: \"/decks/new\",\n    name: \"Create Deck\",\n    Component: \"CreateDeck\"\n  }, {\n    path: \"/decks/:deckId/study\",\n    name: \"Study\",\n    Component: \"Study\"\n  }, {\n    path: \"/decks/:deckId/edit\",\n    name: \"Edit Deck\",\n    Component: \"EditDeck\"\n  }, {\n    path: \"/decks/:deckId/cards/new\",\n    name: \"Add Card\",\n    Component: \"AddCard\"\n  }, {\n    path: \"/decks/:deckId/cards/:cardId/edit\",\n    name: \"Edit Card\",\n    Component: \"EditCard\"\n  }];\n  useEffect(() => {\n    const crumbArray = crumbs.map((crumb, key) => {\n      const found = routes.find(route => {\n        return route.name === crumb;\n      }); // special cases to use names based on the specific deck or card\n\n      if (found.path.includes(\":deckId\")) {\n        const replacement = found.path.replace(\":deckId\", deckId);\n        found.path = replacement;\n      }\n\n      if (found.path.includes(\":cardId\")) {\n        const replacement = found.path.replace(\":cardId\", cardId);\n        found.path = replacement;\n      }\n\n      if (found.name === \"Deck\") {\n        found.name = currentDeck.name;\n      }\n\n      if (found.name === \"Edit Card\") {\n        found.name = `Edit Card ${cardId}`;\n      } // just a name for the current page, a link for everything else\n\n\n      if (crumbs.indexOf(crumb) === crumbs.length - 1) {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"breadcrumb-item active\",\n          children: found.name\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 16\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"breadcrumb-item\",\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            to: found.path,\n            children: found.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 13\n          }, this)\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this);\n      }\n    });\n    setBreadcrumbs(crumbArray);\n  }, [cardId, crumbs]);\n  return /*#__PURE__*/_jsxDEV(\"ol\", {\n    className: \"breadcrumb\",\n    children: breadcrumbs\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 10\n  }, this);\n};\n\n_s(Breadcrumb, \"sb0kqTHgSLH/3TprFGfM2YBJCLM=\", false, function () {\n  return [useParams];\n});\n\n_c = Breadcrumb;\nexport default Breadcrumb;\n\nvar _c;\n\n$RefreshReg$(_c, \"Breadcrumb\");","map":{"version":3,"sources":["D:/Thinkful/qualified-challenges/Project_Flashcards_Qualified_1/src/Layout/Breadcrumb.js"],"names":["React","useEffect","useState","Link","useParams","Breadcrumb","crumbs","currentDeck","deckId","cardId","breadcrumbs","setBreadcrumbs","routes","path","name","Component","crumbArray","map","crumb","key","found","find","route","includes","replacement","replace","indexOf","length"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\n\r\n/** A component containing links back to pages in the path to current page\r\n * \r\n *  @param {array} crumbs\r\n *  an array of the pages to be in the breadcrumbed, [\"foo\", \"bar\", \"etc\"]\r\n *  @param {object} currentDeck\r\n *  stately object containing the current deck, {id, name, description}\r\n *  should only exist in routes including :deckId and :cardId\r\n */\r\n\r\nconst Breadcrumb = ({ crumbs, currentDeck }) => {\r\n  const { deckId, cardId } = useParams();\r\n  const [breadcrumbs, setBreadcrumbs] = useState([]);\r\n  const routes = [\r\n    { path: \"/\", name: \"Home\", Component: \"Home\" },\r\n    { path: \"/decks/:deckId\", name: \"Deck\", Component: \"Deck\" },\r\n    { path: \"/decks/new\", name: \"Create Deck\", Component: \"CreateDeck\" },\r\n    { path: \"/decks/:deckId/study\", name: \"Study\", Component: \"Study\" },\r\n    { path: \"/decks/:deckId/edit\", name: \"Edit Deck\", Component: \"EditDeck\" },\r\n    { path: \"/decks/:deckId/cards/new\", name: \"Add Card\", Component: \"AddCard\" },\r\n    { path: \"/decks/:deckId/cards/:cardId/edit\", name: \"Edit Card\", Component: \"EditCard\" },\r\n  ];\r\n\r\n  useEffect(() => {\r\n    const crumbArray = crumbs.map((crumb, key) => {\r\n      const found = routes.find((route) => {\r\n        return route.name === crumb;\r\n      });\r\n      // special cases to use names based on the specific deck or card\r\n      if (found.path.includes(\":deckId\")) {\r\n        const replacement = found.path.replace(\":deckId\", deckId);\r\n        found.path = replacement;\r\n      }\r\n      if (found.path.includes(\":cardId\")) {\r\n        const replacement = found.path.replace(\":cardId\", cardId);\r\n        found.path = replacement;\r\n      }\r\n      if (found.name === \"Deck\") {\r\n        found.name = currentDeck.name;\r\n      }\r\n      if (found.name === \"Edit Card\") {\r\n        found.name = `Edit Card ${cardId}`\r\n      }\r\n      // just a name for the current page, a link for everything else\r\n      if (crumbs.indexOf(crumb) === crumbs.length - 1) {\r\n        return <li key={key} className=\"breadcrumb-item active\">{found.name}</li>;\r\n      } else {\r\n        return (\r\n          <li key={key} className=\"breadcrumb-item\">\r\n            <Link to={found.path}>{found.name}</Link>\r\n          </li>\r\n        );\r\n      }\r\n    });\r\n    setBreadcrumbs(crumbArray);\r\n  }, [cardId, crumbs]);\r\n  return <ol className=\"breadcrumb\">{breadcrumbs}</ol>;\r\n};\r\n\r\nexport default Breadcrumb;\r\n"]},"metadata":{},"sourceType":"module"}