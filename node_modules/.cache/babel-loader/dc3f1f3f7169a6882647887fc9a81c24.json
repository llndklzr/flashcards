{"ast":null,"code":"var _jsxFileName = \"D:\\\\Thinkful\\\\qualified-challenges\\\\Project_Flashcards_Qualified_1\\\\src\\\\Layout\\\\Breadcrumb.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Link, useParams, useRouteMatch } from \"react-router-dom\";\nimport routes from \"./routes\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Breadcrumb = ({\n  crumbs,\n  currentDeck\n}) => {\n  _s();\n\n  const {\n    deckId,\n    cardId\n  } = useParams();\n  const [breadcrumbs, setBreadcrumbs] = useState([]);\n  const {\n    url\n  } = useRouteMatch();\n  useEffect(() => {\n    async function buildBreadcrumbs() {\n      const crumbArray = await crumbs.map((crumb, key) => {\n        const found = routes.find(route => {\n          return route.name === crumb;\n        });\n\n        if (found.path.includes(\":deckId\")) {\n          const replacement = found.path.replace(\":deckId\", deckId);\n          found.path = replacement;\n        }\n\n        if (found.path.includes(\":cardId\")) {\n          const replacement = found.path.replace(\":cardId\", cardId);\n          found.path = replacement;\n        }\n\n        if (found.name === \"Deck\") {\n          found.name = currentDeck.name;\n        }\n\n        console.log(found.name);\n\n        if (crumbs.indexOf(crumb) === crumbs.length - 1) {\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"breadcrumb-item active\",\n            children: found.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 18\n          }, this);\n        } else {\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"breadcrumb-item\",\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: found.path,\n              children: found.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 32,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 13\n          }, this);\n        }\n      });\n      setBreadcrumbs(crumbArray);\n    }\n  }, [url]);\n  return /*#__PURE__*/_jsxDEV(\"ol\", {\n    className: \"breadcrumb\",\n    children: breadcrumbs\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 10\n  }, this);\n};\n\n_s(Breadcrumb, \"J0JL5O3m946fTVNcD61yfs0ZqN4=\", false, function () {\n  return [useParams, useRouteMatch];\n});\n\n_c = Breadcrumb;\nexport default Breadcrumb;\n\nvar _c;\n\n$RefreshReg$(_c, \"Breadcrumb\");","map":{"version":3,"sources":["D:/Thinkful/qualified-challenges/Project_Flashcards_Qualified_1/src/Layout/Breadcrumb.js"],"names":["React","useEffect","useState","Link","useParams","useRouteMatch","routes","Breadcrumb","crumbs","currentDeck","deckId","cardId","breadcrumbs","setBreadcrumbs","url","buildBreadcrumbs","crumbArray","map","crumb","key","found","find","route","name","path","includes","replacement","replace","console","log","indexOf","length"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,IAAT,EAAeC,SAAf,EAA0BC,aAA1B,QAA+C,kBAA/C;AACA,OAAOC,MAAP,MAAmB,UAAnB;;;AAEA,MAAMC,UAAU,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA;AAAV,CAAD,KAA6B;AAAA;;AAC9C,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAqBP,SAAS,EAApC;AACA,QAAM,CAACQ,WAAD,EAAcC,cAAd,IAAgCX,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM;AAAEY,IAAAA;AAAF,MAAUT,aAAa,EAA7B;AACAJ,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAec,gBAAf,GAAkC;AAChC,YAAMC,UAAU,GAAG,MAAMR,MAAM,CAACS,GAAP,CAAW,CAACC,KAAD,EAAQC,GAAR,KAAgB;AAClD,cAAMC,KAAK,GAAGd,MAAM,CAACe,IAAP,CAAaC,KAAD,IAAW;AACnC,iBAAOA,KAAK,CAACC,IAAN,KAAeL,KAAtB;AACD,SAFa,CAAd;;AAGA,YAAIE,KAAK,CAACI,IAAN,CAAWC,QAAX,CAAoB,SAApB,CAAJ,EAAoC;AAClC,gBAAMC,WAAW,GAAGN,KAAK,CAACI,IAAN,CAAWG,OAAX,CAAmB,SAAnB,EAA8BjB,MAA9B,CAApB;AACAU,UAAAA,KAAK,CAACI,IAAN,GAAaE,WAAb;AACD;;AACD,YAAIN,KAAK,CAACI,IAAN,CAAWC,QAAX,CAAoB,SAApB,CAAJ,EAAoC;AAClC,gBAAMC,WAAW,GAAGN,KAAK,CAACI,IAAN,CAAWG,OAAX,CAAmB,SAAnB,EAA8BhB,MAA9B,CAApB;AACAS,UAAAA,KAAK,CAACI,IAAN,GAAaE,WAAb;AACD;;AACD,YAAIN,KAAK,CAACG,IAAN,KAAe,MAAnB,EAA2B;AACzBH,UAAAA,KAAK,CAACG,IAAN,GAAad,WAAW,CAACc,IAAzB;AACD;;AACDK,QAAAA,OAAO,CAACC,GAAR,CAAYT,KAAK,CAACG,IAAlB;;AACA,YAAIf,MAAM,CAACsB,OAAP,CAAeZ,KAAf,MAA0BV,MAAM,CAACuB,MAAP,GAAgB,CAA9C,EAAiD;AAC/C,8BAAO;AAAI,YAAA,SAAS,EAAC,wBAAd;AAAA,sBAAwCX,KAAK,CAACG;AAA9C;AAAA;AAAA;AAAA;AAAA,kBAAP;AACD,SAFD,MAEO;AACL,8BACE;AAAI,YAAA,SAAS,EAAC,iBAAd;AAAA,mCACE,QAAC,IAAD;AAAM,cAAA,EAAE,EAAEH,KAAK,CAACI,IAAhB;AAAA,wBAAuBJ,KAAK,CAACG;AAA7B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBADF;AAKD;AACF,OAzBwB,CAAzB;AA0BAV,MAAAA,cAAc,CAACG,UAAD,CAAd;AACD;AACF,GA9BQ,EA8BN,CAACF,GAAD,CA9BM,CAAT;AA+BA,sBAAO;AAAI,IAAA,SAAS,EAAC,YAAd;AAAA,cAA4BF;AAA5B;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CApCD;;GAAML,U;UACuBH,S,EAEXC,a;;;KAHZE,U;AAsCN,eAAeA,UAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Link, useParams, useRouteMatch } from \"react-router-dom\";\r\nimport routes from \"./routes\";\r\n\r\nconst Breadcrumb = ({ crumbs, currentDeck }) => {\r\n  const { deckId, cardId } = useParams();\r\n  const [breadcrumbs, setBreadcrumbs] = useState([]);\r\n  const { url } = useRouteMatch();\r\n  useEffect(() => {\r\n    async function buildBreadcrumbs() {\r\n      const crumbArray = await crumbs.map((crumb, key) => {\r\n        const found = routes.find((route) => {\r\n          return route.name === crumb;\r\n        });\r\n        if (found.path.includes(\":deckId\")) {\r\n          const replacement = found.path.replace(\":deckId\", deckId);\r\n          found.path = replacement;\r\n        }\r\n        if (found.path.includes(\":cardId\")) {\r\n          const replacement = found.path.replace(\":cardId\", cardId);\r\n          found.path = replacement;\r\n        }\r\n        if (found.name === \"Deck\") {\r\n          found.name = currentDeck.name;\r\n        }\r\n        console.log(found.name);\r\n        if (crumbs.indexOf(crumb) === crumbs.length - 1) {\r\n          return <li className=\"breadcrumb-item active\">{found.name}</li>;\r\n        } else {\r\n          return (\r\n            <li className=\"breadcrumb-item\">\r\n              <Link to={found.path}>{found.name}</Link>\r\n            </li>\r\n          );\r\n        }\r\n      });\r\n      setBreadcrumbs(crumbArray);\r\n    }\r\n  }, [url]);\r\n  return <ol className=\"breadcrumb\">{breadcrumbs}</ol>;\r\n};\r\n\r\nexport default Breadcrumb;\r\n"]},"metadata":{},"sourceType":"module"}