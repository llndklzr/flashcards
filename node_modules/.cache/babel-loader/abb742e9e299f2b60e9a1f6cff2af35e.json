{"ast":null,"code":"var _jsxFileName = \"D:\\\\Thinkful\\\\qualified-challenges\\\\Project_Flashcards_Qualified_1\\\\src\\\\Layout\\\\EditCard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Button } from \"./Button\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { readCard, updateCard } from \"../utils/api\";\nimport CardForm from \"./CardForm\";\n/** A component to modify the content of a particular card via an API\r\n *\r\n *  @param {function} setLoading\r\n *  set true to update decks and trigger a rerender\r\n *  @param {boolean} loading\r\n *  is the page currently in a loading cycle?\r\n *  prevent renders before data arrives\r\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction EditCard({\n  setLoading,\n  loading\n}) {\n  _s();\n\n  const {\n    cardId,\n    deckId\n  } = useParams();\n  const [editCardData, setEditCardData] = useState({});\n  const history = useHistory();\n  const initialEditCardData = {};\n\n  async function loadEditCardData() {\n    const abortController = new AbortController();\n\n    try {\n      const currentCard = await readCard(cardId, abortController.signal);\n      initialEditCardData.id = currentCard.id;\n      initialEditCardData.front = currentCard.front;\n      initialEditCardData.back = currentCard.back;\n      initialEditCardData.deckId = currentCard.deckId;\n      setEditCardData(initialEditCardData);\n    } catch (error) {\n      if (error.name === \"AbortError\") {\n        console.log(\"loadEditCardData Aborted\");\n      } else {\n        throw error;\n      }\n    }\n\n    return () => abortController.abort();\n  }\n\n  loadEditCardData();\n\n  const handleChange = ({\n    target\n  }) => {\n    setEditCardData({ ...editCardData,\n      [target.name]: target.value\n    });\n  };\n\n  async function handleSubmit(event) {\n    event.preventDefault();\n    const abortController = new AbortController();\n    await updateCard(editCardData, abortController.signal);\n    history.push(`/decks/${deckId}`);\n    setLoading(true);\n    return () => abortController.abort();\n  }\n\n  console.log(initialEditCardData);\n\n  const renderView = /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Edit Card\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardForm, {\n      initialCardData: initialEditCardData,\n      setLoading: setLoading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Edit Card Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 12\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: renderView\n    }, void 0, false);\n  }\n}\n\n_s(EditCard, \"pbFfe6ms07mw2t2J2tUCkryLiNs=\", false, function () {\n  return [useParams, useHistory];\n});\n\n_c = EditCard;\nexport default EditCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditCard\");","map":{"version":3,"sources":["D:/Thinkful/qualified-challenges/Project_Flashcards_Qualified_1/src/Layout/EditCard.js"],"names":["React","useEffect","useState","Button","useHistory","useParams","readCard","updateCard","CardForm","EditCard","setLoading","loading","cardId","deckId","editCardData","setEditCardData","history","initialEditCardData","loadEditCardData","abortController","AbortController","currentCard","signal","id","front","back","error","name","console","log","abort","handleChange","target","value","handleSubmit","event","preventDefault","push","renderView"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,MAAT,QAAuB,UAAvB;AACA,SAASC,UAAT,EAAqBC,SAArB,QAAsC,kBAAtC;AACA,SAASC,QAAT,EAAmBC,UAAnB,QAAqC,cAArC;AACA,OAAOC,QAAP,MAAqB,YAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAEA,SAASC,QAAT,CAAkB;AAAEC,EAAAA,UAAF;AAAcC,EAAAA;AAAd,CAAlB,EAA2C;AAAA;;AACzC,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAqBR,SAAS,EAApC;AACA,QAAM,CAACS,YAAD,EAAeC,eAAf,IAAkCb,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAMc,OAAO,GAAGZ,UAAU,EAA1B;AACA,QAAMa,mBAAmB,GAAG,EAA5B;;AAEA,iBAAeC,gBAAf,GAAkC;AAChC,UAAMC,eAAe,GAAG,IAAIC,eAAJ,EAAxB;;AACA,QAAI;AACF,YAAMC,WAAW,GAAG,MAAMf,QAAQ,CAACM,MAAD,EAASO,eAAe,CAACG,MAAzB,CAAlC;AACAL,MAAAA,mBAAmB,CAACM,EAApB,GAAyBF,WAAW,CAACE,EAArC;AACAN,MAAAA,mBAAmB,CAACO,KAApB,GAA4BH,WAAW,CAACG,KAAxC;AACAP,MAAAA,mBAAmB,CAACQ,IAApB,GAA2BJ,WAAW,CAACI,IAAvC;AACAR,MAAAA,mBAAmB,CAACJ,MAApB,GAA6BQ,WAAW,CAACR,MAAzC;AACAE,MAAAA,eAAe,CAACE,mBAAD,CAAf;AACD,KAPD,CAOE,OAAOS,KAAP,EAAc;AACd,UAAIA,KAAK,CAACC,IAAN,KAAe,YAAnB,EAAiC;AAC/BC,QAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACD,OAFD,MAEO;AACL,cAAMH,KAAN;AACD;AACF;;AACD,WAAO,MAAMP,eAAe,CAACW,KAAhB,EAAb;AACD;;AACDZ,EAAAA,gBAAgB;;AAChB,QAAMa,YAAY,GAAG,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAgB;AACnCjB,IAAAA,eAAe,CAAC,EACd,GAAGD,YADW;AAEd,OAACkB,MAAM,CAACL,IAAR,GAAeK,MAAM,CAACC;AAFR,KAAD,CAAf;AAID,GALD;;AAOA,iBAAeC,YAAf,CAA4BC,KAA5B,EAAmC;AACjCA,IAAAA,KAAK,CAACC,cAAN;AACA,UAAMjB,eAAe,GAAG,IAAIC,eAAJ,EAAxB;AACA,UAAMb,UAAU,CAACO,YAAD,EAAeK,eAAe,CAACG,MAA/B,CAAhB;AACAN,IAAAA,OAAO,CAACqB,IAAR,CAAc,UAASxB,MAAO,EAA9B;AACAH,IAAAA,UAAU,CAAC,IAAD,CAAV;AACA,WAAO,MAAMS,eAAe,CAACW,KAAhB,EAAb;AACD;;AACDF,EAAAA,OAAO,CAACC,GAAR,CAAYZ,mBAAZ;;AACA,QAAMqB,UAAU,gBACd;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,QAAD;AACE,MAAA,eAAe,EAAErB,mBADnB;AAEE,MAAA,UAAU,EAAEP;AAFd;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;;AASA,MAAIC,OAAJ,EAAa;AACX,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,GAFD,MAEO;AACL,wBAAO;AAAA,gBAAG2B;AAAH,qBAAP;AACD;AACF;;GAvDQ7B,Q;UACoBJ,S,EAEXD,U;;;KAHTK,Q;AAyDT,eAAeA,QAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Button } from \"./Button\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport { readCard, updateCard } from \"../utils/api\";\r\nimport CardForm from \"./CardForm\";\r\n\r\n/** A component to modify the content of a particular card via an API\r\n *\r\n *  @param {function} setLoading\r\n *  set true to update decks and trigger a rerender\r\n *  @param {boolean} loading\r\n *  is the page currently in a loading cycle?\r\n *  prevent renders before data arrives\r\n */\r\n\r\nfunction EditCard({ setLoading, loading }) {\r\n  const { cardId, deckId } = useParams();\r\n  const [editCardData, setEditCardData] = useState({});\r\n  const history = useHistory();\r\n  const initialEditCardData = {};\r\n\r\n  async function loadEditCardData() {\r\n    const abortController = new AbortController();\r\n    try {\r\n      const currentCard = await readCard(cardId, abortController.signal);\r\n      initialEditCardData.id = currentCard.id;\r\n      initialEditCardData.front = currentCard.front;\r\n      initialEditCardData.back = currentCard.back;\r\n      initialEditCardData.deckId = currentCard.deckId;\r\n      setEditCardData(initialEditCardData);\r\n    } catch (error) {\r\n      if (error.name === \"AbortError\") {\r\n        console.log(\"loadEditCardData Aborted\");\r\n      } else {\r\n        throw error;\r\n      }\r\n    }\r\n    return () => abortController.abort();\r\n  }\r\n  loadEditCardData();\r\n  const handleChange = ({ target }) => {\r\n    setEditCardData({\r\n      ...editCardData,\r\n      [target.name]: target.value,\r\n    });\r\n  };\r\n\r\n  async function handleSubmit(event) {\r\n    event.preventDefault();\r\n    const abortController = new AbortController();\r\n    await updateCard(editCardData, abortController.signal);\r\n    history.push(`/decks/${deckId}`);\r\n    setLoading(true);\r\n    return () => abortController.abort();\r\n  }\r\n  console.log(initialEditCardData);\r\n  const renderView = (\r\n    <div>\r\n      <h2>Edit Card</h2>\r\n      <CardForm\r\n        initialCardData={initialEditCardData}\r\n        setLoading={setLoading}\r\n      />\r\n    </div>\r\n  );\r\n  if (loading) {\r\n    return <p>Edit Card Loading...</p>;\r\n  } else {\r\n    return <>{renderView}</>;\r\n  }\r\n}\r\n\r\nexport default EditCard;\r\n"]},"metadata":{},"sourceType":"module"}