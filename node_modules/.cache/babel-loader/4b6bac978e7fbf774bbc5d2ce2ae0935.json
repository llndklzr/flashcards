{"ast":null,"code":"var _jsxFileName = \"D:\\\\Thinkful\\\\qualified-challenges\\\\Project_Flashcards_Qualified_1\\\\src\\\\Layout\\\\CardForm.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { createCard } from \"../utils/api\";\n/**\r\n *\r\n * @param {object} initialCardData\r\n * the data to populate the form initially,\r\n * blank for AddCard, the current card for EditCard\r\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction CardForm({\n  initialCardData\n}) {\n  _s();\n\n  const params = useParams();\n  const [cardData, setCardData] = useState({});\n  const history = useHistory();\n  useEffect(() => {\n    const abortController = new AbortController();\n\n    async function loadCardData() {\n      try {\n        setCardData(initialCardData);\n      } catch (error) {\n        if (error.name === \"AbortError\") {\n          console.log(\"loadEditCardData Aborted\");\n        } else {\n          throw error;\n        }\n      }\n    }\n\n    loadCardData();\n    return () => abortController.abort();\n  }, []);\n\n  const handleChange = ({\n    target\n  }) => {\n    setCardData({ ...editCardData,\n      [target.name]: target.value\n    });\n  };\n\n  async function handleSubmit(event) {\n    event.preventDefault();\n    const abortController = new AbortController();\n\n    if (params.cardId) {\n      await updateCard(cardData, abortController.signal);\n      history.push(`/decks/${deckId}`);\n    } else {\n      await createCard(params.deckId, cardData, abortController.signal);\n      setCardData(initialCardData);\n    }\n\n    setLoading(true);\n    return () => abortController.abort();\n  }\n\n  const renderView = /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"form-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"front\",\n        children: \"Front\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        className: \"form-control\",\n        id: \"front\",\n        name: \"front\",\n        rows: \"3\",\n        onChange: handleChange,\n        value: cardData.front\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"backText\",\n        children: \"Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        className: \"form-control\",\n        id: \"back\",\n        name: \"back\",\n        rows: \"3\",\n        onChange: handleChange,\n        value: cardData.back\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => {\n          setLoading(true);\n          return history.push(`/decks/${id}`);\n        },\n        children: \"Done\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n\n  return renderView;\n}\n\n_s(CardForm, \"WVruzjf3jvlRKWZboBiQlMNHLvs=\", true);\n\n_c = CardForm;\nexport default CardForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"CardForm\");","map":{"version":3,"sources":["D:/Thinkful/qualified-challenges/Project_Flashcards_Qualified_1/src/Layout/CardForm.js"],"names":["React","createCard","CardForm","initialCardData","params","useParams","cardData","setCardData","useState","history","useHistory","useEffect","abortController","AbortController","loadCardData","error","name","console","log","abort","handleChange","target","editCardData","value","handleSubmit","event","preventDefault","cardId","updateCard","signal","push","deckId","setLoading","renderView","front","back","id"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { createCard } from \"../utils/api\";\r\n\r\n/**\r\n *\r\n * @param {object} initialCardData\r\n * the data to populate the form initially,\r\n * blank for AddCard, the current card for EditCard\r\n */\r\n\r\nfunction CardForm({ initialCardData }) {\r\n  const params = useParams();\r\n  const [cardData, setCardData] = useState({});\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const abortController = new AbortController();\r\n    async function loadCardData() {\r\n      try {\r\n        setCardData(initialCardData);\r\n      } catch (error) {\r\n        if (error.name === \"AbortError\") {\r\n          console.log(\"loadEditCardData Aborted\");\r\n        } else {\r\n          throw error;\r\n        }\r\n      }\r\n    }\r\n    loadCardData();\r\n    return () => abortController.abort();\r\n  }, []);\r\n\r\n  const handleChange = ({ target }) => {\r\n    setCardData({\r\n      ...editCardData,\r\n      [target.name]: target.value,\r\n    });\r\n  };\r\n\r\n  async function handleSubmit(event) {\r\n    event.preventDefault();\r\n    const abortController = new AbortController();\r\n    if (params.cardId) {\r\n      await updateCard(cardData, abortController.signal);\r\n      history.push(`/decks/${deckId}`);\r\n    } else {\r\n      await createCard(params.deckId, cardData, abortController.signal);\r\n      setCardData(initialCardData);\r\n    }\r\n    setLoading(true);\r\n    return () => abortController.abort();\r\n  }\r\n\r\n  const renderView = (\r\n    <>\r\n      <form onSubmit={handleSubmit} className=\"form-group\">\r\n        <label htmlFor=\"front\">Front</label>\r\n        <textarea\r\n          className=\"form-control\"\r\n          id=\"front\"\r\n          name=\"front\"\r\n          rows=\"3\"\r\n          onChange={handleChange}\r\n          value={cardData.front}\r\n        />\r\n        <label htmlFor=\"backText\">Back</label>\r\n        <textarea\r\n          className=\"form-control\"\r\n          id=\"back\"\r\n          name=\"back\"\r\n          rows=\"3\"\r\n          onChange={handleChange}\r\n          value={cardData.back}\r\n        />\r\n        <Button\r\n          onClick={() => {\r\n            setLoading(true);\r\n            return history.push(`/decks/${id}`);\r\n          }}\r\n        >\r\n          Done\r\n        </Button>\r\n        <Button type=\"submit\">Save</Button>\r\n      </form>\r\n    </>\r\n  );\r\n  return renderView;\r\n}\r\nexport default CardForm;\r\n"]},"metadata":{},"sourceType":"module"}