{"ast":null,"code":"var _jsxFileName = \"D:\\\\Thinkful\\\\qualified-challenges\\\\Project_Flashcards_Qualified_1\\\\src\\\\Layout\\\\Breadcrumb.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Link, useParams, useRouteMatch } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Breadcrumb = ({\n  crumbs,\n  currentDeck\n}) => {\n  _s();\n\n  const {\n    deckId,\n    cardId\n  } = useParams();\n  const [breadcrumbs, setBreadcrumbs] = useState([]);\n  const {\n    url\n  } = useRouteMatch();\n  const routes = [{\n    path: \"/\",\n    name: \"Home\",\n    Component: \"Home\"\n  }, {\n    path: \"/decks/:deckId\",\n    name: \"Deck\",\n    Component: \"Deck\"\n  }, {\n    path: \"/decks/new\",\n    name: \"Create Deck\",\n    Component: \"CreateDeck\"\n  }, {\n    path: \"/decks/:deckId/study\",\n    name: \"Study\",\n    Component: \"Study\"\n  }, {\n    path: \"/decks/:deckId/edit\",\n    name: \"Edit Deck\",\n    Component: \"EditDeck\"\n  }, {\n    path: \"/decks/:deckId/cards/new\",\n    name: \"Add Card\",\n    Component: \"AddCard\"\n  }, {\n    path: \"/decks/:deckId/cards/:cardId/edit\",\n    name: \"Edit Card\",\n    Component: \"EditCard\"\n  }];\n  useEffect(() => {\n    const crumbArray = crumbs.map((crumb, key) => {\n      const found = routes.find(route => {\n        return route.name === crumb;\n      });\n\n      if (found.path.includes(\":deckId\")) {\n        const replacement = found.path.replace(\":deckId\", deckId);\n        found.path = replacement;\n      }\n\n      if (found.path.includes(\":cardId\")) {\n        const replacement = found.path.replace(\":cardId\", cardId);\n        found.path = replacement;\n      }\n\n      if (found.name === \"Deck\") {\n        found.name = currentDeck.name;\n      }\n\n      console.log(found.name);\n\n      if (crumbs.indexOf(crumb) === crumbs.length - 1) {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"breadcrumb-item active\",\n          children: found.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 16\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"breadcrumb-item\",\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            to: found.path,\n            children: found.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this);\n      }\n    });\n    setBreadcrumbs(crumbArray);\n  }, [url]);\n  return /*#__PURE__*/_jsxDEV(\"ol\", {\n    className: \"breadcrumb\",\n    children: breadcrumbs\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 10\n  }, this);\n};\n\n_s(Breadcrumb, \"J0JL5O3m946fTVNcD61yfs0ZqN4=\", false, function () {\n  return [useParams, useRouteMatch];\n});\n\n_c = Breadcrumb;\nexport default Breadcrumb;\n\nvar _c;\n\n$RefreshReg$(_c, \"Breadcrumb\");","map":{"version":3,"sources":["D:/Thinkful/qualified-challenges/Project_Flashcards_Qualified_1/src/Layout/Breadcrumb.js"],"names":["React","useEffect","useState","Link","useParams","useRouteMatch","Breadcrumb","crumbs","currentDeck","deckId","cardId","breadcrumbs","setBreadcrumbs","url","routes","path","name","Component","crumbArray","map","crumb","key","found","find","route","includes","replacement","replace","console","log","indexOf","length"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Link, useParams, useRouteMatch } from \"react-router-dom\";\r\n\r\nconst Breadcrumb = ({ crumbs, currentDeck }) => {\r\n  const { deckId, cardId } = useParams();\r\n  const [breadcrumbs, setBreadcrumbs] = useState([]);\r\n  const { url } = useRouteMatch();\r\n  const routes = [\r\n    {\r\n      path: \"/\",\r\n      name: \"Home\",\r\n      Component: \"Home\",\r\n    },\r\n    {\r\n      path: \"/decks/:deckId\",\r\n      name: \"Deck\",\r\n      Component: \"Deck\",\r\n    },\r\n    {\r\n      path: \"/decks/new\",\r\n      name: \"Create Deck\",\r\n      Component: \"CreateDeck\",\r\n    },\r\n    {\r\n      path: \"/decks/:deckId/study\",\r\n      name: \"Study\",\r\n      Component: \"Study\",\r\n    },\r\n    {\r\n      path: \"/decks/:deckId/edit\",\r\n      name: \"Edit Deck\",\r\n      Component: \"EditDeck\",\r\n    },\r\n    {\r\n      path: \"/decks/:deckId/cards/new\",\r\n      name: \"Add Card\",\r\n      Component: \"AddCard\",\r\n    },\r\n    {\r\n      path: \"/decks/:deckId/cards/:cardId/edit\",\r\n      name: \"Edit Card\",\r\n      Component: \"EditCard\",\r\n    },\r\n  ];\r\n  useEffect(() => {\r\n    const crumbArray = crumbs.map((crumb, key) => {\r\n      const found = routes.find((route) => {\r\n        return route.name === crumb;\r\n      });\r\n      if (found.path.includes(\":deckId\")) {\r\n        const replacement = found.path.replace(\":deckId\", deckId);\r\n        found.path = replacement;\r\n      }\r\n      if (found.path.includes(\":cardId\")) {\r\n        const replacement = found.path.replace(\":cardId\", cardId);\r\n        found.path = replacement;\r\n      }\r\n      if (found.name === \"Deck\") {\r\n        found.name = currentDeck.name;\r\n      }\r\n      console.log(found.name);\r\n      if (crumbs.indexOf(crumb) === crumbs.length - 1) {\r\n        return <li className=\"breadcrumb-item active\">{found.name}</li>;\r\n      } else {\r\n        return (\r\n          <li className=\"breadcrumb-item\">\r\n            <Link to={found.path}>{found.name}</Link>\r\n          </li>\r\n        );\r\n      }\r\n    });\r\n    setBreadcrumbs(crumbArray);\r\n  }, [url]);\r\n  return <ol className=\"breadcrumb\">{breadcrumbs}</ol>;\r\n};\r\n\r\nexport default Breadcrumb;\r\n"]},"metadata":{},"sourceType":"module"}