{"ast":null,"code":"var _jsxFileName = \"D:\\\\Thinkful\\\\qualified-challenges\\\\Project_Flashcards_Qualified_1\\\\src\\\\Layout\\\\Breadcrumb.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport routes from \"./routes\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Breadcrumb = ({\n  crumbs = [],\n  deckId = null,\n  cardId = null,\n  setRenderFlag\n}) => {\n  _s();\n\n  // i.e. crumbs = [{name: \"Home\", path: \"/\"}, {name: \"Deck\", path: `/decks/${deckId}`},{name: \"Study\"} ]\n  const [breadcrumbs, setBreadcrumbs] = useState([]);\n  useEffect(() => {\n    try {\n      const crumbArray = crumbs.map(({\n        crumb\n      }, key) => {\n        const found = routes.find(route => route.name === crumb.name);\n\n        if (found.path.includes(\":deckId\")) {\n          crumb.path.replace(\":deckId\", deckId);\n        }\n\n        if (crumbs.indexOf(crumb) === crumbs.length - 1) {\n          return /*#__PURE__*/_jsxDEV(\"span\", {\n            children: crumb.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 23,\n            columnNumber: 18\n          }, this);\n        } else {\n          return /*#__PURE__*/_jsxDEV(Link, {\n            to: crumb.path,\n            children: crumb.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 18\n          }, this);\n        }\n      });\n      setBreadcrumbs(crumbArray);\n    } catch (error) {\n      console.err(error);\n    }\n  }, [renderFlag]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: breadcrumbs\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 10\n  }, this);\n};\n\n_s(Breadcrumb, \"lpT/BPXS3i0YTB2TuZm61gjVk8U=\");\n\n_c = Breadcrumb;\nexport default Breadcrumb;\n\nvar _c;\n\n$RefreshReg$(_c, \"Breadcrumb\");","map":{"version":3,"sources":["D:/Thinkful/qualified-challenges/Project_Flashcards_Qualified_1/src/Layout/Breadcrumb.js"],"names":["React","useEffect","useState","Link","useParams","routes","Breadcrumb","crumbs","deckId","cardId","setRenderFlag","breadcrumbs","setBreadcrumbs","crumbArray","map","crumb","key","found","find","route","name","path","includes","replace","indexOf","length","error","console","err","renderFlag"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,IAAT,EAAeC,SAAf,QAAgC,kBAAhC;AACA,OAAOC,MAAP,MAAmB,UAAnB;;;AAEA,MAAMC,UAAU,GAAG,CAAC;AAClBC,EAAAA,MAAM,GAAG,EADS;AAElBC,EAAAA,MAAM,GAAG,IAFS;AAGlBC,EAAAA,MAAM,GAAG,IAHS;AAIlBC,EAAAA;AAJkB,CAAD,KAKb;AAAA;;AACJ;AACA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCV,QAAQ,CAAC,EAAD,CAA9C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI;AACF,YAAMY,UAAU,GAAGN,MAAM,CAACO,GAAP,CAAW,CAAC;AAAEC,QAAAA;AAAF,OAAD,EAAYC,GAAZ,KAAoB;AAChD,cAAMC,KAAK,GAAGZ,MAAM,CAACa,IAAP,CAAaC,KAAD,IAAWA,KAAK,CAACC,IAAN,KAAeL,KAAK,CAACK,IAA5C,CAAd;;AACA,YAAIH,KAAK,CAACI,IAAN,CAAWC,QAAX,CAAoB,SAApB,CAAJ,EAAoC;AAClCP,UAAAA,KAAK,CAACM,IAAN,CAAWE,OAAX,CAAmB,SAAnB,EAA8Bf,MAA9B;AACD;;AAED,YAAID,MAAM,CAACiB,OAAP,CAAeT,KAAf,MAA0BR,MAAM,CAACkB,MAAP,GAAgB,CAA9C,EAAiD;AAC/C,8BAAO;AAAA,sBAAOV,KAAK,CAACK;AAAb;AAAA;AAAA;AAAA;AAAA,kBAAP;AACD,SAFD,MAEO;AACL,8BAAO,QAAC,IAAD;AAAM,YAAA,EAAE,EAAEL,KAAK,CAACM,IAAhB;AAAA,sBAAuBN,KAAK,CAACK;AAA7B;AAAA;AAAA;AAAA;AAAA,kBAAP;AACD;AACF,OAXkB,CAAnB;AAYAR,MAAAA,cAAc,CAACC,UAAD,CAAd;AACD,KAdD,CAcE,OAAOa,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,GAlBQ,EAkBN,CAACG,UAAD,CAlBM,CAAT;AAoBA,sBAAO;AAAA,cAAMlB;AAAN;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CA9BD;;GAAML,U;;KAAAA,U;AAgCN,eAAeA,UAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport routes from \"./routes\";\r\n\r\nconst Breadcrumb = ({\r\n  crumbs = [],\r\n  deckId = null,\r\n  cardId = null,\r\n  setRenderFlag,\r\n}) => {\r\n  // i.e. crumbs = [{name: \"Home\", path: \"/\"}, {name: \"Deck\", path: `/decks/${deckId}`},{name: \"Study\"} ]\r\n  const [breadcrumbs, setBreadcrumbs] = useState([]);\r\n\r\n  useEffect(() => {\r\n    try {\r\n      const crumbArray = crumbs.map(({ crumb }, key) => {\r\n        const found = routes.find((route) => route.name === crumb.name);\r\n        if (found.path.includes(\":deckId\")) {\r\n          crumb.path.replace(\":deckId\", deckId);\r\n        }\r\n\r\n        if (crumbs.indexOf(crumb) === crumbs.length - 1) {\r\n          return <span>{crumb.name}</span>;\r\n        } else {\r\n          return <Link to={crumb.path}>{crumb.name}</Link>;\r\n        }\r\n      });\r\n      setBreadcrumbs(crumbArray);\r\n    } catch (error) {\r\n      console.err(error);\r\n    }\r\n  }, [renderFlag]);\r\n\r\n  return <div>{breadcrumbs}</div>;\r\n};\r\n\r\nexport default Breadcrumb;\r\n"]},"metadata":{},"sourceType":"module"}