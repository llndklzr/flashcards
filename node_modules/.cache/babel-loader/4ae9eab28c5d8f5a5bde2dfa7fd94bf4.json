{"ast":null,"code":"var _jsxFileName = \"D:\\\\Thinkful\\\\qualified-challenges\\\\Project_Flashcards_Qualified_1\\\\src\\\\Layout\\\\CardForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useParams, useHistory, useRouteMatch } from \"react-router-dom\";\nimport { createCard, updateCard } from \"../utils/api\";\nimport { Button } from \"./Button\";\n/**\r\n *\r\n * @param {object} initialCardData\r\n * the data to populate the form initially,\r\n * blank for AddCard, the current card for EditCard\r\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction CardForm({\n  initialCardData,\n  setLoading\n}) {\n  _s();\n\n  const {\n    deckId\n  } = useParams();\n  const {\n    url\n  } = useRouteMatch();\n  const [cardData, setCardData] = useState({});\n  const history = useHistory();\n  console.log(initialCardData);\n  useEffect(() => {\n    const abortController = new AbortController();\n\n    async function loadCardData() {\n      try {\n        setCardData(initialCardData);\n      } catch (error) {\n        if (error.name === \"AbortError\") {\n          console.log(\"loadCardData Aborted\");\n        } else {\n          throw error;\n        }\n      }\n    }\n\n    loadCardData();\n    return () => abortController.abort();\n  }, [url]);\n\n  const handleChange = ({\n    target\n  }) => {\n    setCardData({ ...cardData,\n      [target.name]: target.value\n    });\n  };\n\n  async function handleSubmit(event) {\n    event.preventDefault();\n    const abortController = new AbortController();\n\n    try {\n      if (cardData.cardId) {\n        await updateCard(cardData, abortController.signal);\n        history.push(`/decks/${deckId}`);\n      } else {\n        await createCard(deckId, cardData, abortController.signal);\n        setCardData(initialCardData);\n      }\n    } catch (error) {\n      if (error.name === \"AbortError\") {\n        console.log(\"CardForm Aborted\");\n      } else {\n        throw error;\n      }\n    }\n\n    setLoading(true);\n    return () => abortController.abort();\n  }\n\n  const renderView = /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"form-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"front\",\n        children: \"Front\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        className: \"form-control\",\n        id: \"front\",\n        name: \"front\",\n        rows: \"3\",\n        onChange: handleChange,\n        value: cardData.front\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"backText\",\n        children: \"Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        className: \"form-control\",\n        id: \"back\",\n        name: \"back\",\n        rows: \"3\",\n        onChange: handleChange,\n        value: cardData.back\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => {\n          setLoading(true);\n          return history.push(`/decks/${deckId}`);\n        },\n        children: \"Done\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n\n  return renderView;\n}\n\n_s(CardForm, \"FGHgKJF6OaZW7qGtbqRgzvBLQY4=\", false, function () {\n  return [useParams, useRouteMatch, useHistory];\n});\n\n_c = CardForm;\nexport default CardForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"CardForm\");","map":{"version":3,"sources":["D:/Thinkful/qualified-challenges/Project_Flashcards_Qualified_1/src/Layout/CardForm.js"],"names":["React","useEffect","useState","useParams","useHistory","useRouteMatch","createCard","updateCard","Button","CardForm","initialCardData","setLoading","deckId","url","cardData","setCardData","history","console","log","abortController","AbortController","loadCardData","error","name","abort","handleChange","target","value","handleSubmit","event","preventDefault","cardId","signal","push","renderView","front","back"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,SAAT,EAAoBC,UAApB,EAAgCC,aAAhC,QAAqD,kBAArD;AACA,SAASC,UAAT,EAAqBC,UAArB,QAAuC,cAAvC;AACA,SAASC,MAAT,QAAuB,UAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;AAEA,SAASC,QAAT,CAAkB;AAAEC,EAAAA,eAAF;AAAmBC,EAAAA;AAAnB,CAAlB,EAAmD;AAAA;;AACjD,QAAM;AAAEC,IAAAA;AAAF,MAAaT,SAAS,EAA5B;AACA,QAAM;AAAEU,IAAAA;AAAF,MAAUR,aAAa,EAA7B;AACA,QAAM,CAACS,QAAD,EAAWC,WAAX,IAA0Bb,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAMc,OAAO,GAAGZ,UAAU,EAA1B;AACAa,EAAAA,OAAO,CAACC,GAAR,CAAYR,eAAZ;AACAT,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMkB,eAAe,GAAG,IAAIC,eAAJ,EAAxB;;AACA,mBAAeC,YAAf,GAA8B;AAC5B,UAAI;AACFN,QAAAA,WAAW,CAACL,eAAD,CAAX;AACD,OAFD,CAEE,OAAOY,KAAP,EAAc;AACd,YAAIA,KAAK,CAACC,IAAN,KAAe,YAAnB,EAAiC;AAC/BN,UAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACD,SAFD,MAEO;AACL,gBAAMI,KAAN;AACD;AACF;AACF;;AACDD,IAAAA,YAAY;AACZ,WAAO,MAAMF,eAAe,CAACK,KAAhB,EAAb;AACD,GAfQ,EAeN,CAACX,GAAD,CAfM,CAAT;;AAiBA,QAAMY,YAAY,GAAG,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAgB;AACnCX,IAAAA,WAAW,CAAC,EACV,GAAGD,QADO;AAEV,OAACY,MAAM,CAACH,IAAR,GAAeG,MAAM,CAACC;AAFZ,KAAD,CAAX;AAID,GALD;;AAOA,iBAAeC,YAAf,CAA4BC,KAA5B,EAAmC;AACjCA,IAAAA,KAAK,CAACC,cAAN;AACA,UAAMX,eAAe,GAAG,IAAIC,eAAJ,EAAxB;;AACA,QAAI;AACF,UAAIN,QAAQ,CAACiB,MAAb,EAAqB;AACnB,cAAMxB,UAAU,CAACO,QAAD,EAAWK,eAAe,CAACa,MAA3B,CAAhB;AACAhB,QAAAA,OAAO,CAACiB,IAAR,CAAc,UAASrB,MAAO,EAA9B;AACD,OAHD,MAGO;AACL,cAAMN,UAAU,CAACM,MAAD,EAASE,QAAT,EAAmBK,eAAe,CAACa,MAAnC,CAAhB;AACAjB,QAAAA,WAAW,CAACL,eAAD,CAAX;AACD;AACF,KARD,CAQE,OAAOY,KAAP,EAAc;AACd,UAAIA,KAAK,CAACC,IAAN,KAAe,YAAnB,EAAiC;AAC/BN,QAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACD,OAFD,MAEO;AACL,cAAMI,KAAN;AACD;AACF;;AACDX,IAAAA,UAAU,CAAC,IAAD,CAAV;AACA,WAAO,MAAMQ,eAAe,CAACK,KAAhB,EAAb;AACD;;AAED,QAAMU,UAAU,gBACd;AAAA,2BACE;AAAM,MAAA,QAAQ,EAAEN,YAAhB;AAA8B,MAAA,SAAS,EAAC,YAAxC;AAAA,8BACE;AAAO,QAAA,OAAO,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AACE,QAAA,SAAS,EAAC,cADZ;AAEE,QAAA,EAAE,EAAC,OAFL;AAGE,QAAA,IAAI,EAAC,OAHP;AAIE,QAAA,IAAI,EAAC,GAJP;AAKE,QAAA,QAAQ,EAAEH,YALZ;AAME,QAAA,KAAK,EAAEX,QAAQ,CAACqB;AANlB;AAAA;AAAA;AAAA;AAAA,cAFF,eAUE;AAAO,QAAA,OAAO,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAVF,eAWE;AACE,QAAA,SAAS,EAAC,cADZ;AAEE,QAAA,EAAE,EAAC,MAFL;AAGE,QAAA,IAAI,EAAC,MAHP;AAIE,QAAA,IAAI,EAAC,GAJP;AAKE,QAAA,QAAQ,EAAEV,YALZ;AAME,QAAA,KAAK,EAAEX,QAAQ,CAACsB;AANlB;AAAA;AAAA;AAAA;AAAA,cAXF,eAmBE,QAAC,MAAD;AACE,QAAA,OAAO,EAAE,MAAM;AACbzB,UAAAA,UAAU,CAAC,IAAD,CAAV;AACA,iBAAOK,OAAO,CAACiB,IAAR,CAAc,UAASrB,MAAO,EAA9B,CAAP;AACD,SAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAnBF,eA2BE,QAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA3BF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;;AAiCA,SAAOsB,UAAP;AACD;;GAtFQzB,Q;UACYN,S,EACHE,a,EAEAD,U;;;KAJTK,Q;AAuFT,eAAeA,QAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useParams, useHistory, useRouteMatch } from \"react-router-dom\";\r\nimport { createCard, updateCard } from \"../utils/api\";\r\nimport { Button } from \"./Button\";\r\n\r\n/**\r\n *\r\n * @param {object} initialCardData\r\n * the data to populate the form initially,\r\n * blank for AddCard, the current card for EditCard\r\n */\r\n\r\nfunction CardForm({ initialCardData, setLoading }) {\r\n  const { deckId } = useParams();\r\n  const { url } = useRouteMatch();\r\n  const [cardData, setCardData] = useState({});\r\n  const history = useHistory();\r\n  console.log(initialCardData);\r\n  useEffect(() => {\r\n    const abortController = new AbortController();\r\n    async function loadCardData() {\r\n      try {\r\n        setCardData(initialCardData);\r\n      } catch (error) {\r\n        if (error.name === \"AbortError\") {\r\n          console.log(\"loadCardData Aborted\");\r\n        } else {\r\n          throw error;\r\n        }\r\n      }\r\n    }\r\n    loadCardData();\r\n    return () => abortController.abort();\r\n  }, [url]);\r\n\r\n  const handleChange = ({ target }) => {\r\n    setCardData({\r\n      ...cardData,\r\n      [target.name]: target.value,\r\n    });\r\n  };\r\n\r\n  async function handleSubmit(event) {\r\n    event.preventDefault();\r\n    const abortController = new AbortController();\r\n    try {\r\n      if (cardData.cardId) {\r\n        await updateCard(cardData, abortController.signal);\r\n        history.push(`/decks/${deckId}`);\r\n      } else {\r\n        await createCard(deckId, cardData, abortController.signal);\r\n        setCardData(initialCardData);\r\n      }\r\n    } catch (error) {\r\n      if (error.name === \"AbortError\") {\r\n        console.log(\"CardForm Aborted\");\r\n      } else {\r\n        throw error;\r\n      }\r\n    }\r\n    setLoading(true);\r\n    return () => abortController.abort();\r\n  }\r\n\r\n  const renderView = (\r\n    <>\r\n      <form onSubmit={handleSubmit} className=\"form-group\">\r\n        <label htmlFor=\"front\">Front</label>\r\n        <textarea\r\n          className=\"form-control\"\r\n          id=\"front\"\r\n          name=\"front\"\r\n          rows=\"3\"\r\n          onChange={handleChange}\r\n          value={cardData.front}\r\n        />\r\n        <label htmlFor=\"backText\">Back</label>\r\n        <textarea\r\n          className=\"form-control\"\r\n          id=\"back\"\r\n          name=\"back\"\r\n          rows=\"3\"\r\n          onChange={handleChange}\r\n          value={cardData.back}\r\n        />\r\n        <Button\r\n          onClick={() => {\r\n            setLoading(true);\r\n            return history.push(`/decks/${deckId}`);\r\n          }}\r\n        >\r\n          Done\r\n        </Button>\r\n        <Button type=\"submit\">Save</Button>\r\n      </form>\r\n    </>\r\n  );\r\n  return renderView;\r\n}\r\nexport default CardForm;\r\n"]},"metadata":{},"sourceType":"module"}