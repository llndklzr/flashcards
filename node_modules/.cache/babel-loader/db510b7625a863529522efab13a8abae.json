{"ast":null,"code":"var _jsxFileName = \"D:\\\\Thinkful\\\\qualified-challenges\\\\Project_Flashcards_Qualified_1\\\\src\\\\Layout\\\\DeckThumbnails.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { Button, DeleteButton } from \"./Button\";\nimport { deleteDeck, listDecks } from \"../utils/api/index\";\n/** displays each deck with buttons to Study, View, and Delete\r\n *  @param {array} decks\r\n *  the list of decks, {id, name, description}\r\n *  @param {function} setLoading\r\n *  set true to trigger updating decks and a rerender\r\n *  @param {boolean} loading\r\n *  is the page currently in a loading cycle?\r\n *  prevent renders before data arrives\r\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction DeckThumbnails({\n  setLoading,\n  loading\n}) {\n  _s();\n\n  const history = useHistory();\n  const [decks, setDecks] = useState([]);\n  useEffect(() => {\n    const abortController = new AbortController();\n    setLoading(true);\n\n    async function loadDecks() {\n      try {\n        const deckContent = await listDecks(abortController.signal);\n        setDecks(deckContent);\n      } catch (error) {\n        if (error.name === \"AbortError\") {\n          console.log(\"loadDecks Aborted\");\n        } else {\n          throw error;\n        }\n      }\n    }\n\n    loadDecks();\n    setLoading(false);\n    return () => abortController.abort();\n  }, [loading]);\n\n  async function deleteHandler(event) {\n    console.log(event);\n\n    if (window.confirm(\"Delete this deck?\\n\\nYou will not be able to recover it.\")) {\n      const abortController = new AbortController(); //await deleteDeck(id, abortController.signal);\n      //history.push(\"/\");\n      //setLoading(true);\n\n      return () => abortController.abort();\n    }\n  }\n\n  const renderView = decks.map(({\n    id,\n    name,\n    description,\n    cards\n  }) => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card mb-3\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-body\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"card-title text-danger\",\n          children: name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n          className: \"card-subtitle mb-2 text-muted\",\n          children: [cards.length, \" cards\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"card-text\",\n          children: description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Link, {\n          to: `/decks/${id}/study`,\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            children: \"Study\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Link, {\n          to: `/decks/${id}`,\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            children: \"View\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(DeleteButton, {\n          onClick: deleteHandler,\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)\n    }, id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this);\n  });\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading Deck Thumbnails...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 12\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: renderView\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 12\n    }, this);\n  }\n}\n\n_s(DeckThumbnails, \"nVZ+uN85oziZ7WQcZF1a5kYvNCA=\", false, function () {\n  return [useHistory];\n});\n\n_c = DeckThumbnails;\nexport default DeckThumbnails;\n\nvar _c;\n\n$RefreshReg$(_c, \"DeckThumbnails\");","map":{"version":3,"sources":["D:/Thinkful/qualified-challenges/Project_Flashcards_Qualified_1/src/Layout/DeckThumbnails.js"],"names":["React","useEffect","useState","Link","useHistory","Button","DeleteButton","deleteDeck","listDecks","DeckThumbnails","setLoading","loading","history","decks","setDecks","abortController","AbortController","loadDecks","deckContent","signal","error","name","console","log","abort","deleteHandler","event","window","confirm","renderView","map","id","description","cards","length"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { Button, DeleteButton } from \"./Button\";\r\nimport { deleteDeck, listDecks } from \"../utils/api/index\";\r\n\r\n/** displays each deck with buttons to Study, View, and Delete\r\n *  @param {array} decks\r\n *  the list of decks, {id, name, description}\r\n *  @param {function} setLoading\r\n *  set true to trigger updating decks and a rerender\r\n *  @param {boolean} loading\r\n *  is the page currently in a loading cycle?\r\n *  prevent renders before data arrives\r\n */\r\nfunction DeckThumbnails({ setLoading, loading }) {\r\n  const history = useHistory();\r\n  const [decks, setDecks] = useState([]);\r\n  useEffect(() => {\r\n    const abortController = new AbortController();\r\n    setLoading(true);\r\n    async function loadDecks() {\r\n      try {\r\n        const deckContent = await listDecks(abortController.signal);\r\n        setDecks(deckContent);\r\n      } catch (error) {\r\n        if (error.name === \"AbortError\") {\r\n          console.log(\"loadDecks Aborted\");\r\n        } else {\r\n          throw error;\r\n        }\r\n      }\r\n    }\r\n    loadDecks();\r\n    setLoading(false);\r\n    return () => abortController.abort();\r\n  }, [loading]);\r\n\r\n  async function deleteHandler(event) {\r\n    console.log(event);\r\n    if (\r\n      window.confirm(\"Delete this deck?\\n\\nYou will not be able to recover it.\")\r\n    ) {\r\n      const abortController = new AbortController();\r\n      //await deleteDeck(id, abortController.signal);\r\n      //history.push(\"/\");\r\n      //setLoading(true);\r\n      return () => abortController.abort();\r\n    }\r\n  }\r\n\r\n  const renderView = decks.map(({ id, name, description, cards }) => {\r\n    return (\r\n      <div key={id} className=\"card mb-3\">\r\n        <div className=\"card-body\">\r\n          {/* TODO: deck title here */}\r\n          <h4 className=\"card-title text-danger\">{name}</h4>\r\n          {/* TODO: number of cards here */}\r\n          <h6 className=\"card-subtitle mb-2 text-muted\">\r\n            {cards.length} cards\r\n          </h6>\r\n          <p className=\"card-text\">{description}</p>\r\n          <br />\r\n          {/* TODO: onClick to go to Study */}\r\n          <Link to={`/decks/${id}/study`}>\r\n            <Button>Study</Button>\r\n          </Link>\r\n          {/* TODO: onClick to go to DeckView */}\r\n          <Link to={`/decks/${id}`}>\r\n            <Button>View</Button>\r\n          </Link>\r\n          {/* TODO: modal w/ \"OK\" or \"Cancel\" */}\r\n          {/* TODO: onClick delete */}\r\n          <DeleteButton onClick={deleteHandler}>Delete</DeleteButton>\r\n        </div>\r\n      </div>\r\n    );\r\n  });\r\n  if (loading) {\r\n    return <p>Loading Deck Thumbnails...</p>;\r\n  } else {\r\n    return <div>{renderView}</div>;\r\n  }\r\n}\r\n\r\nexport default DeckThumbnails;\r\n"]},"metadata":{},"sourceType":"module"}