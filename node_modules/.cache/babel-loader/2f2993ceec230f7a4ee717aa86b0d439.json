{"ast":null,"code":"var _jsxFileName = \"D:\\\\Thinkful\\\\qualified-challenges\\\\Project_Flashcards_Qualified_1\\\\src\\\\Layout\\\\EditCard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Button } from \"./Button\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { readCard, updateCard } from \"../utils/api\";\nimport CardForm from \"./CardForm\";\n/** A component to modify the content of a particular card via an API\r\n *\r\n *  @param {function} setLoading\r\n *  set true to update decks and trigger a rerender\r\n *  @param {boolean} loading\r\n *  is the page currently in a loading cycle?\r\n *  prevent renders before data arrives\r\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction EditCard({\n  setLoading,\n  loading\n}) {\n  _s();\n\n  const {\n    cardId,\n    deckId\n  } = useParams();\n  const history = useHistory();\n  let initialEditCardData = {};\n  useEffect(() => {\n    const abortController = new AbortController();\n\n    async function loadEditCardData() {\n      try {\n        const currentCard = await readCard(cardId, abortController.signal);\n        const {\n          id,\n          front,\n          back,\n          deckId\n        } = currentCard;\n        initialEditCardData = {\n          id,\n          front,\n          back,\n          deckId\n        };\n      } catch (error) {\n        if (error.name === \"AbortError\") {\n          console.log(\"loadEditCardData Aborted\");\n        } else {\n          throw error;\n        }\n      }\n    }\n\n    loadEditCardData();\n    return () => abortController.abort();\n  }, [cardId]); // const handleChange = ({ target }) => {\n  //   setEditCardData({\n  //     ...editCardData,\n  //     [target.name]: target.value,\n  //   });\n  // };\n  // async function handleSubmit(event) {\n  //   event.preventDefault();\n  //   const abortController = new AbortController();\n  //   await updateCard(editCardData, abortController.signal);\n  //   history.push(`/decks/${deckId}`);\n  //   setLoading(true);\n  //   return () => abortController.abort();\n  // }\n\n  console.log(initialEditCardData);\n\n  const renderView = /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Edit Card\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardForm, {\n      initialCardData: initialEditCardData,\n      setLoading: setLoading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Edit Card Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 12\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: renderView\n    }, void 0, false);\n  }\n}\n\n_s(EditCard, \"jS7q9Td7UTCGiRooCYUQZusNo4M=\", false, function () {\n  return [useParams, useHistory];\n});\n\n_c = EditCard;\nexport default EditCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditCard\");","map":{"version":3,"sources":["D:/Thinkful/qualified-challenges/Project_Flashcards_Qualified_1/src/Layout/EditCard.js"],"names":["React","useEffect","useState","Button","useHistory","useParams","readCard","updateCard","CardForm","EditCard","setLoading","loading","cardId","deckId","history","initialEditCardData","abortController","AbortController","loadEditCardData","currentCard","signal","id","front","back","error","name","console","log","abort","renderView"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,MAAT,QAAuB,UAAvB;AACA,SAASC,UAAT,EAAqBC,SAArB,QAAsC,kBAAtC;AACA,SAASC,QAAT,EAAmBC,UAAnB,QAAqC,cAArC;AACA,OAAOC,QAAP,MAAqB,YAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAEA,SAASC,QAAT,CAAkB;AAAEC,EAAAA,UAAF;AAAcC,EAAAA;AAAd,CAAlB,EAA2C;AAAA;;AACzC,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAqBR,SAAS,EAApC;AACA,QAAMS,OAAO,GAAGV,UAAU,EAA1B;AACA,MAAIW,mBAAmB,GAAG,EAA1B;AACAd,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMe,eAAe,GAAG,IAAIC,eAAJ,EAAxB;;AACA,mBAAeC,gBAAf,GAAkC;AAChC,UAAI;AACF,cAAMC,WAAW,GAAG,MAAMb,QAAQ,CAACM,MAAD,EAASI,eAAe,CAACI,MAAzB,CAAlC;AACA,cAAM;AAAEC,UAAAA,EAAF;AAAMC,UAAAA,KAAN;AAAaC,UAAAA,IAAb;AAAmBV,UAAAA;AAAnB,YAA8BM,WAApC;AACAJ,QAAAA,mBAAmB,GAAG;AACpBM,UAAAA,EADoB;AAEpBC,UAAAA,KAFoB;AAGpBC,UAAAA,IAHoB;AAIpBV,UAAAA;AAJoB,SAAtB;AAMD,OATD,CASE,OAAOW,KAAP,EAAc;AACd,YAAIA,KAAK,CAACC,IAAN,KAAe,YAAnB,EAAiC;AAC/BC,UAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACD,SAFD,MAEO;AACL,gBAAMH,KAAN;AACD;AACF;AACF;;AACDN,IAAAA,gBAAgB;AAChB,WAAO,MAAMF,eAAe,CAACY,KAAhB,EAAb;AACD,GAtBQ,EAsBN,CAAChB,MAAD,CAtBM,CAAT,CAJyC,CA4BzC;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAc,EAAAA,OAAO,CAACC,GAAR,CAAYZ,mBAAZ;;AACA,QAAMc,UAAU,gBACd;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,QAAD;AAAU,MAAA,eAAe,EAAEd,mBAA3B;AAAgD,MAAA,UAAU,EAAEL;AAA5D;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;;AAMA,MAAIC,OAAJ,EAAa;AACX,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,GAFD,MAEO;AACL,wBAAO;AAAA,gBAAGkB;AAAH,qBAAP;AACD;AACF;;GAvDQpB,Q;UACoBJ,S,EACXD,U;;;KAFTK,Q;AAyDT,eAAeA,QAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Button } from \"./Button\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport { readCard, updateCard } from \"../utils/api\";\r\nimport CardForm from \"./CardForm\";\r\n\r\n/** A component to modify the content of a particular card via an API\r\n *\r\n *  @param {function} setLoading\r\n *  set true to update decks and trigger a rerender\r\n *  @param {boolean} loading\r\n *  is the page currently in a loading cycle?\r\n *  prevent renders before data arrives\r\n */\r\n\r\nfunction EditCard({ setLoading, loading }) {\r\n  const { cardId, deckId } = useParams();\r\n  const history = useHistory();\r\n  let initialEditCardData = {}\r\n  useEffect(() => {\r\n    const abortController = new AbortController();\r\n    async function loadEditCardData() {\r\n      try {\r\n        const currentCard = await readCard(cardId, abortController.signal);\r\n        const { id, front, back, deckId } = currentCard;\r\n        initialEditCardData = {\r\n          id,\r\n          front,\r\n          back,\r\n          deckId,\r\n        };\r\n      } catch (error) {\r\n        if (error.name === \"AbortError\") {\r\n          console.log(\"loadEditCardData Aborted\");\r\n        } else {\r\n          throw error;\r\n        }\r\n      }\r\n    }\r\n    loadEditCardData();\r\n    return () => abortController.abort();\r\n  }, [cardId]);\r\n\r\n  // const handleChange = ({ target }) => {\r\n  //   setEditCardData({\r\n  //     ...editCardData,\r\n  //     [target.name]: target.value,\r\n  //   });\r\n  // };\r\n\r\n  // async function handleSubmit(event) {\r\n  //   event.preventDefault();\r\n  //   const abortController = new AbortController();\r\n  //   await updateCard(editCardData, abortController.signal);\r\n  //   history.push(`/decks/${deckId}`);\r\n  //   setLoading(true);\r\n  //   return () => abortController.abort();\r\n  // }\r\n  console.log(initialEditCardData)\r\n  const renderView = (\r\n    <div>\r\n      <h2>Edit Card</h2>\r\n      <CardForm initialCardData={initialEditCardData} setLoading={setLoading} />\r\n    </div>\r\n  );\r\n  if (loading) {\r\n    return <p>Edit Card Loading...</p>;\r\n  } else {\r\n    return <>{renderView}</>;\r\n  }\r\n}\r\n\r\nexport default EditCard;\r\n"]},"metadata":{},"sourceType":"module"}