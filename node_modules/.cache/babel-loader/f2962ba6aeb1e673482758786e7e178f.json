{"ast":null,"code":"var _jsxFileName = \"D:\\\\Thinkful\\\\qualified-challenges\\\\Project_Flashcards_Qualified_1\\\\src\\\\Layout\\\\AddCard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { Button } from \"./Button\";\nimport CardForm from \"./CardForm\";\nimport { createCard } from \"../utils/api/index\"; // /decks/:deckId/cards/new\n\n/** Create a new card and send it to the API\r\n *\r\n *  @param {object} currentDeck\r\n *  the deck which corresponds with :deckId in the url\r\n *  @param {function} setLoading\r\n *  set true to trigger a rerender\r\n *  @param {boolean} loading\r\n *  is the page currently in a loading cycle?\r\n *  prevent renders before data arrives\r\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction AddCard({\n  currentDeck,\n  setLoading,\n  loading\n}) {\n  _s();\n\n  const {\n    deckId\n  } = useParams();\n  const {\n    name,\n    id\n  } = currentDeck;\n  const initialAddCardData = {\n    deckId,\n    front: \"\",\n    back: \"\"\n  };\n\n  const renderView = /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Add Card\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Deck: \", name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardForm, {\n      initialCardData: initialAddCardData,\n      setLoading: setLoading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Add Card Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 12\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: renderView\n    }, void 0, false);\n  }\n}\n\n_s(AddCard, \"6yYjfuOVIJXeyB9Ntxit+fGIK3s=\", false, function () {\n  return [useParams];\n});\n\n_c = AddCard;\nexport default AddCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddCard\");","map":{"version":3,"sources":["D:/Thinkful/qualified-challenges/Project_Flashcards_Qualified_1/src/Layout/AddCard.js"],"names":["React","useState","useEffect","useHistory","useParams","Button","CardForm","createCard","AddCard","currentDeck","setLoading","loading","deckId","name","id","initialAddCardData","front","back","renderView"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,UAAT,EAAqBC,SAArB,QAAsC,kBAAtC;AACA,SAASC,MAAT,QAAuB,UAAvB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,UAAT,QAA2B,oBAA3B,C,CAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAEA,SAASC,OAAT,CAAiB;AAAEC,EAAAA,WAAF;AAAeC,EAAAA,UAAf;AAA2BC,EAAAA;AAA3B,CAAjB,EAAuD;AAAA;;AACrD,QAAM;AAAEC,IAAAA;AAAF,MAAaR,SAAS,EAA5B;AACA,QAAM;AAAES,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAeL,WAArB;AACA,QAAMM,kBAAkB,GAAG;AACzBH,IAAAA,MADyB;AAEzBI,IAAAA,KAAK,EAAE,EAFkB;AAGzBC,IAAAA,IAAI,EAAE;AAHmB,GAA3B;;AAMA,QAAMC,UAAU,gBACd;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,2BAAWL,IAAX;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,QAAD;AAAU,MAAA,eAAe,EAAEE,kBAA3B;AAA+C,MAAA,UAAU,EAAEL;AAA3D;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;;AAOA,MAAIC,OAAJ,EAAa;AACX,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,GAFD,MAEO;AACL,wBAAO;AAAA,gBAAGO;AAAH,qBAAP;AACD;AACF;;GArBQV,O;UACYJ,S;;;KADZI,O;AAuBT,eAAeA,OAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport { Button } from \"./Button\";\r\nimport CardForm from \"./CardForm\";\r\nimport { createCard } from \"../utils/api/index\";\r\n\r\n// /decks/:deckId/cards/new\r\n\r\n/** Create a new card and send it to the API\r\n *\r\n *  @param {object} currentDeck\r\n *  the deck which corresponds with :deckId in the url\r\n *  @param {function} setLoading\r\n *  set true to trigger a rerender\r\n *  @param {boolean} loading\r\n *  is the page currently in a loading cycle?\r\n *  prevent renders before data arrives\r\n */\r\n\r\nfunction AddCard({ currentDeck, setLoading, loading }) {\r\n  const { deckId } = useParams();\r\n  const { name, id } = currentDeck;\r\n  const initialAddCardData = {\r\n    deckId,\r\n    front: \"\",\r\n    back: \"\",\r\n  };\r\n  \r\n  const renderView = (\r\n    <div>\r\n      <h2>Add Card</h2>\r\n      <h3>Deck: {name}</h3>\r\n      <CardForm initialCardData={initialAddCardData} setLoading={setLoading} />\r\n    </div>\r\n  );\r\n  if (loading) {\r\n    return <p>Add Card Loading...</p>;\r\n  } else {\r\n    return <>{renderView}</>;\r\n  }\r\n}\r\n\r\nexport default AddCard;\r\n"]},"metadata":{},"sourceType":"module"}