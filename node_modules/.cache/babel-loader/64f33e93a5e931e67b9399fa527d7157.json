{"ast":null,"code":"var _jsxFileName = \"D:\\\\Thinkful\\\\qualified-challenges\\\\Project_Flashcards_Qualified_1\\\\src\\\\Layout\\\\EditCard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { readCard } from \"../utils/api\";\nimport CardForm from \"./CardForm\";\n/** A component to modify the content of a particular card via an API\r\n *\r\n *  @param {function} setLoading\r\n *  set true to update decks and trigger a rerender\r\n *  @param {boolean} loading\r\n *  is the page currently in a loading cycle?\r\n *  prevent renders before data arrives\r\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction EditCard({\n  setLoading,\n  loading\n}) {\n  _s();\n\n  const {\n    cardId,\n    deckId\n  } = useParams();\n  const initialEditCardData = {};\n  useEffect(() => {\n    async function loadEditCardData() {\n      const abortController = new AbortController();\n\n      try {\n        const currentCard = await readCard(cardId, abortController.signal);\n        initialEditCardData.id = currentCard.id;\n        initialEditCardData.front = currentCard.front;\n        initialEditCardData.back = currentCard.back;\n        initialEditCardData.deckId = currentCard.deckId;\n      } catch (error) {\n        if (error.name === \"AbortError\") {\n          console.log(\"loadEditCardData Aborted\");\n        } else {\n          throw error;\n        }\n      }\n\n      return () => abortController.abort();\n    }\n\n    loadEditCardData();\n  }, [deckId, cardId]);\n\n  const renderView = /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Edit Card\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardForm, {\n      initialCardData: initialEditCardData,\n      setLoading: setLoading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Edit Card Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 12\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: renderView\n    }, void 0, false);\n  }\n}\n\n_s(EditCard, \"efTQ8Mq+qzEtlhmIa4mmMT9y6pI=\", false, function () {\n  return [useParams];\n});\n\n_c = EditCard;\nexport default EditCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditCard\");","map":{"version":3,"sources":["D:/Thinkful/qualified-challenges/Project_Flashcards_Qualified_1/src/Layout/EditCard.js"],"names":["React","useEffect","useParams","readCard","CardForm","EditCard","setLoading","loading","cardId","deckId","initialEditCardData","loadEditCardData","abortController","AbortController","currentCard","signal","id","front","back","error","name","console","log","abort","renderView"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,OAAOC,QAAP,MAAqB,YAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAEA,SAASC,QAAT,CAAkB;AAAEC,EAAAA,UAAF;AAAcC,EAAAA;AAAd,CAAlB,EAA2C;AAAA;;AACzC,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAqBP,SAAS,EAApC;AACA,QAAMQ,mBAAmB,GAAG,EAA5B;AAEAT,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAeU,gBAAf,GAAkC;AAChC,YAAMC,eAAe,GAAG,IAAIC,eAAJ,EAAxB;;AACA,UAAI;AACF,cAAMC,WAAW,GAAG,MAAMX,QAAQ,CAACK,MAAD,EAASI,eAAe,CAACG,MAAzB,CAAlC;AACAL,QAAAA,mBAAmB,CAACM,EAApB,GAAyBF,WAAW,CAACE,EAArC;AACAN,QAAAA,mBAAmB,CAACO,KAApB,GAA4BH,WAAW,CAACG,KAAxC;AACAP,QAAAA,mBAAmB,CAACQ,IAApB,GAA2BJ,WAAW,CAACI,IAAvC;AACAR,QAAAA,mBAAmB,CAACD,MAApB,GAA6BK,WAAW,CAACL,MAAzC;AACD,OAND,CAME,OAAOU,KAAP,EAAc;AACd,YAAIA,KAAK,CAACC,IAAN,KAAe,YAAnB,EAAiC;AAC/BC,UAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACD,SAFD,MAEO;AACL,gBAAMH,KAAN;AACD;AACF;;AACD,aAAO,MAAMP,eAAe,CAACW,KAAhB,EAAb;AACD;;AACDZ,IAAAA,gBAAgB;AACjB,GAnBQ,EAmBN,CAACF,MAAD,EAASD,MAAT,CAnBM,CAAT;;AAqBA,QAAMgB,UAAU,gBACd;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,QAAD;AAAU,MAAA,eAAe,EAAEd,mBAA3B;AAAgD,MAAA,UAAU,EAAEJ;AAA5D;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;;AAMA,MAAIC,OAAJ,EAAa;AACX,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,GAFD,MAEO;AACL,wBAAO;AAAA,gBAAGiB;AAAH,qBAAP;AACD;AACF;;GApCQnB,Q;UACoBH,S;;;KADpBG,Q;AAsCT,eAAeA,QAAf","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { readCard } from \"../utils/api\";\r\nimport CardForm from \"./CardForm\";\r\n\r\n/** A component to modify the content of a particular card via an API\r\n *\r\n *  @param {function} setLoading\r\n *  set true to update decks and trigger a rerender\r\n *  @param {boolean} loading\r\n *  is the page currently in a loading cycle?\r\n *  prevent renders before data arrives\r\n */\r\n\r\nfunction EditCard({ setLoading, loading }) {\r\n  const { cardId, deckId } = useParams();\r\n  const initialEditCardData = {};\r\n\r\n  useEffect(() => {\r\n    async function loadEditCardData() {\r\n      const abortController = new AbortController();\r\n      try {\r\n        const currentCard = await readCard(cardId, abortController.signal);\r\n        initialEditCardData.id = currentCard.id;\r\n        initialEditCardData.front = currentCard.front;\r\n        initialEditCardData.back = currentCard.back;\r\n        initialEditCardData.deckId = currentCard.deckId;\r\n      } catch (error) {\r\n        if (error.name === \"AbortError\") {\r\n          console.log(\"loadEditCardData Aborted\");\r\n        } else {\r\n          throw error;\r\n        }\r\n      }\r\n      return () => abortController.abort();\r\n    }\r\n    loadEditCardData();\r\n  }, [deckId, cardId]);\r\n\r\n  const renderView = (\r\n    <div>\r\n      <h2>Edit Card</h2>\r\n      <CardForm initialCardData={initialEditCardData} setLoading={setLoading} />\r\n    </div>\r\n  );\r\n  if (loading) {\r\n    return <p>Edit Card Loading...</p>;\r\n  } else {\r\n    return <>{renderView}</>;\r\n  }\r\n}\r\n\r\nexport default EditCard;\r\n"]},"metadata":{},"sourceType":"module"}